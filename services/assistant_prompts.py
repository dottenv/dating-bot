"""
Дополнительные промпты и улучшения для AI-ассистента
"""

# Расширенные ответы на популярные вопросы
EXTENDED_RESPONSES = {
    'rating_detailed': """
📊 **Подробно о системе рейтингов:**

🎯 **Ваш текущий рейтинг: {rating} баллов**

📈 **Как повысить рейтинг:**
• Позитивные сообщения (+1 балл за каждое)
• Качественное общение без токсичности
• Взаимные лайки после успешного чата (+5 баллов)
• Длительные беседы с высоким качеством (+2-3 балла)

📉 **Что снижает рейтинг:**
• Токсичные слова и оскорбления (-3 до -10 баллов)
• Попытки принуждения к деанону (-2 балла)
• Запросы интимных фото без согласия (-10 баллов)
• Обоснованные жалобы на вас (-5 до -50 баллов)
• Ложные жалобы с вашей стороны (-30 баллов)

🏆 **Уровни рейтинга:**
• 🥇 Высокий (150+ баллов) - приоритет в поиске
• 🥈 Средний (75-149 баллов) - обычная скорость
• 🥉 Низкий (0-74 балла) - медленный поиск

💡 **Совет:** Будьте вежливы, интересны и позитивны!
""",

    'search_algorithm': """
🔍 **Как работает умный подбор:**

🤖 **AI анализирует совместимость по параметрам:**

1️⃣ **Базовые критерии:**
   • Возраст (±5 лет = отлично, ±10 лет = хорошо)
   • Город (одинаковый = +10% к совместимости)
   • Пол и ориентация (обязательное соответствие)

2️⃣ **Интересы и хобби:**
   • Общие теги в профиле (+20% к совместимости)
   • Схожие цели знакомства
   • Совместимость характеров по описанию

3️⃣ **Система очередей:**
   • Высокий рейтинг = быстрый поиск (30-60 сек)
   • Средний рейтинг = обычная скорость (1-3 мин)
   • Низкий рейтинг = медленнее (3-5 мин)

4️⃣ **Качество профиля влияет на подбор:**
   • Полный профиль = лучшие совпадения
   • Неполный профиль = случайный подбор

💡 **Заполните профиль полностью для идеального подбора!**
""",

    'safety_tips': """
🛡️ **Правила безопасности в боте:**

✅ **Что можно:**
• Вежливое и дружелюбное общение
• Обмен интересами и хобби
• Предложение деанона при качественном общении
• Согласие на 18+ режим при обоюдном желании

❌ **Что запрещено:**
• Оскорбления и токсичность
• Принуждение к деанону или обмену контактами
• Запросы интимных фото без согласия
• Спам и флуд
• Ложные жалобы

🚨 **Система защиты:**
• AI модерирует сообщения в реальном времени
• Автоматическое наказание за нарушения
• Умная система жалоб с анализом переписки
• Защита от ложных обвинений

🆘 **Если что-то не так:**
• Используйте кнопку "Пожаловаться"
• AI проанализирует переписку
• Справедливое решение в течение минут

💡 **Помните: ваша безопасность - наш приоритет!**
""",

    'deanon_guide': """
🎭 **Полный гид по деанону:**

📋 **Условия для предложения деанона:**
• Минимум 30 сообщений в переписке
• Общение минимум 2 дня подряд
• Высокое качество беседы (без конфликтов)
• Взаимная симпатия и интерес

✅ **Как происходит деанон:**
1. Один из собеседников предлагает деанон
2. Второй принимает или отклоняет
3. При согласии - обмен настоящими именами
4. Возможность обмена контактами

🎁 **Что дает деанон:**
• Узнаете настоящие имена
• Можете продолжить общение вне бота
• Обмен социальными сетями
• Возможность встречи в реальности

⚠️ **Важные правила:**
• Деанон должен быть взаимным
• Принуждение к деанону запрещено
• Можно отказаться без объяснений
• Уважайте границы собеседника

💡 **Совет:** Не торопитесь с деаноном, сначала хорошо узнайте человека!
""",

    'entertainment_facts': [
        "🎲 Знаете ли вы, что наш AI анализирует более 15 параметров для подбора идеального собеседника?",
        "⭐ Интересный факт: пользователи с полным профилем находят совпадения в 4 раза быстрее!",
        "🎯 Статистика: 78% пользователей с рейтингом выше 150 находят собеседника за минуту!",
        "🌟 Секрет: позитивные слова в сообщениях не только поднимают настроение, но и ваш рейтинг!",
        "💡 Лайфхак: упоминание общих интересов в первых сообщениях увеличивает шанс на деанон на 60%!",
        "🎪 Факт: самые успешные знакомства начинаются с обсуждения хобби и интересов!",
        "🚀 Знаете ли вы, что AI учитывает даже стиль общения при подборе совместимых людей?",
        "🎨 Интересно: пользователи, которые делятся творчеством, получают на 40% больше положительных откликов!",
        "🌈 Статистика: 85% успешных деанонов происходят после обсуждения планов на будущее!",
        "🎵 Факт: общие музыкальные вкусы - один из сильнейших факторов совместимости!"
    ]
}

def get_random_entertainment_fact():
    """Возвращает случайный интересный факт"""
    import random
    return random.choice(EXTENDED_RESPONSES['entertainment_facts'])

def get_detailed_response(topic: str, user_data: dict = None) -> str:
    """Возвращает детальный ответ по теме"""
    if topic == 'rating' and user_data:
        return EXTENDED_RESPONSES['rating_detailed'].format(
            rating=user_data.get('rating', 100)
        )
    
    return EXTENDED_RESPONSES.get(topic, "Извините, информация по этой теме пока недоступна.")

# Контекстные ответы в зависимости от ситуации
CONTEXTUAL_RESPONSES = {
    'high_rating': [
        "🏆 У вас отличный рейтинг! Вы явно знаете, как правильно общаться.",
        "⭐ Ваш высокий рейтинг дает вам приоритет в поиске - используйте это!",
        "🎯 С таким рейтингом вы найдете собеседника очень быстро!"
    ],
    
    'low_rating': [
        "📈 Ваш рейтинг можно улучшить! Попробуйте быть более позитивным в общении.",
        "💪 Не расстраивайтесь из-за рейтинга - каждое вежливое сообщение его повышает!",
        "🌟 Совет: избегайте конфликтов и будьте дружелюбны - рейтинг быстро вырастет!"
    ],
    
    'in_search': [
        "🔍 Пока идет поиск, расскажите о своих увлечениях!",
        "⏰ Поиск может занять время - давайте поболтаем!",
        "🎲 Хотите узнать интересный факт о работе бота?",
        "💭 Какие качества вы цените в людях больше всего?"
    ],
    
    'premium_user': [
        "👑 Как Premium-пользователь, вы получаете дополнительные возможности!",
        "⚡ Premium статус дает вам преимущества в поиске и подборе.",
        "🌟 Спасибо за поддержку проекта! Ваш Premium очень помогает развитию бота."
    ]
}

def get_contextual_response(context: str) -> str:
    """Возвращает контекстный ответ"""
    import random
    responses = CONTEXTUAL_RESPONSES.get(context, ["Интересно! Расскажите больше."])
    return random.choice(responses)