from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from database.models import User, Profile
from states.registration import RegistrationStates
from keyboards.registration import (
    gender_keyboard, 
    orientation_keyboard, 
    dating_goal_keyboard,
    skip_keyboard,
    photo_source_keyboard
)
from keyboards.main import main_keyboard

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'tg_id': message.from_user.id,
        'username': message.from_user.username
    }
    
    user = await User.filter(tg_id=user_data['tg_id']).first()
    
    if user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        profile = await Profile.filter(user=user).first()
        if profile and profile.profile_completed:
            await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –†–∞–¥—ã —á—Ç–æ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å :)", reply_markup=main_keyboard)
        else:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–µ–π—á–∞—Å!")
            await start_registration(message, state, user)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.create(**user_data)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        await start_registration(message, state, user)

async def start_registration(message: types.Message, state: FSMContext, user):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(user_id=user.id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(RegistrationStates.first_name)

@router.message(RegistrationStates.first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(first_name=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(RegistrationStates.age)

@router.message(RegistrationStates.age)
async def process_age(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    age = int(message.text)
    if age < 18 or age > 100:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await state.update_data(age=age)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?", reply_markup=skip_keyboard)
    await state.set_state(RegistrationStates.city)

@router.message(RegistrationStates.city)
async def process_city(message: types.Message, state: FSMContext):
    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(city=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard)
    await state.set_state(RegistrationStates.gender)

@router.message(RegistrationStates.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=orientation_keyboard)
    await state.set_state(RegistrationStates.orientation)

@router.message(RegistrationStates.orientation)
async def process_orientation(message: types.Message, state: FSMContext):
    await state.update_data(orientation=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    await message.answer("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?", reply_markup=dating_goal_keyboard)
    await state.set_state(RegistrationStates.dating_goal)

@router.message(RegistrationStates.dating_goal)
async def process_dating_goal(message: types.Message, state: FSMContext):
    await state.update_data(dating_goal=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:", reply_markup=skip_keyboard)
    await state.set_state(RegistrationStates.about)

@router.message(RegistrationStates.about)
async def process_about(message: types.Message, state: FSMContext):
    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(about=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º—É–∑—ã–∫–∞, —Å–ø–æ—Ä—Ç, –∫–Ω–∏–≥–∏):", 
        reply_markup=skip_keyboard
    )
    await state.set_state(RegistrationStates.tags)

@router.message(RegistrationStates.tags)
async def process_tags(message: types.Message, state: FSMContext):
    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(tags=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await message.answer(
        "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã:", 
        reply_markup=photo_source_keyboard
    )
    await state.set_state(RegistrationStates.photo)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ:
@router.message(RegistrationStates.photo, F.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
async def process_profile_photo(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile_photos = await message.bot.get_user_profile_photos(message.from_user.id, limit=1)
    
    if user_profile_photos.total_count > 0:
        # –ë–µ—Ä–µ–º file_id –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        photo_id = user_profile_photos.photos[0][-1].file_id
        await state.update_data(photo_id=photo_id)
        await message.answer("–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        await complete_registration(message, state)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.")

@router.message(RegistrationStates.photo, F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def request_upload_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")

@router.message(RegistrationStates.photo, F.photo)
async def process_uploaded_photo(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º file_id –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    await complete_registration(message, state)

@router.message(RegistrationStates.photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_photo(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.")
    await complete_registration(message, state)

# –í—ã–¥–µ–ª–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
async def complete_registration(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    user_id = data.pop('user_id')
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    user = await User.get(id=user_id)
    profile = await Profile.filter(user=user).first()
    
    if profile:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        await Profile.filter(id=profile.id).update(**data, profile_completed=True)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await Profile.create(user=user, **data, profile_completed=True)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", 
        reply_markup=main_keyboard
    )
    await state.clear()

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message):
    from handlers.profile import show_profile
    await show_profile(message)

@router.message(F.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_companion(message: types.Message, state: FSMContext):
    from handlers.chat import start_search
    await start_search(message, state)

@router.message(F.text == "ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
async def ai_assistant_button(message: types.Message):
    from handlers.assistant import cmd_assistant
    await cmd_assistant(message)

@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("find"))
async def cmd_find(message: types.Message, state: FSMContext):
    from handlers.chat import start_search
    await start_search(message, state)

@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    from handlers.chat import active_chats, search_queue
    
    user_id = message.from_user.id
    
    # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
    for tier_queue in search_queue.values():
        if user_id in tier_queue:
            tier_queue.remove(user_id)
    
    await state.clear()
    await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")

@router.message(Command("end"))
async def cmd_end(message: types.Message, state: FSMContext):
    from handlers.chat import active_chats
    
    user_id = message.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        del active_chats[user_id]
        del active_chats[partner_id]
        
        await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        await message.bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
    
    await state.clear()

@router.message(Command("report"))
async def cmd_report(message: types.Message):
    from handlers.chat import active_chats
    
    user_id = message.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è' –≤ —á–∞—Ç–µ")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    from handlers.assistant import cmd_assistant
    await cmd_assistant(message)

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    total_users = await User.all().count()
    active_users = await User.filter(is_active=True).count()
    
    from handlers.chat import active_chats, search_queue
    in_chat = len(active_chats) // 2
    in_queue = sum(len(queue) for queue in search_queue.values())
    
    stats_text = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    stats_text += f"üéÜ –†–µ–π—Ç–∏–Ω–≥: {user.raiting}\n"
    stats_text += f"üë§ –°—Ç–∞—Ç—É—Å: {'Premium' if user.is_premium else '–û–±—ã—á–Ω—ã–π'}\n\n"
    stats_text += f"üåç **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
    stats_text += f"üí¨ –í —á–∞—Ç–µ: {in_chat}\n"
    stats_text += f"üîç –í –ø–æ–∏—Å–∫–µ: {in_queue}"
    
    await message.answer(stats_text, parse_mode="Markdown")

@router.message(Command("settings"))
async def cmd_settings(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    from keyboards.profile import create_keyboard
    kb = create_keyboard([
        ("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications"),
        ("üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", "settings_blacklist"),
        ("üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", "settings_preferences"),
        ("üìä –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", "settings_privacy")
    ])
    
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):", reply_markup=kb)