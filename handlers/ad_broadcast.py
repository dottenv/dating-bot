from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.models import User
from keyboards.profile import create_keyboard
from states.ad_broadcast import AdStates
from services.broadcast import broadcast_service
import json

router = Router()

@router.callback_query(F.data == "create_ad")
async def create_ad(callback: types.CallbackQuery, state: FSMContext):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç\n"
        "‚Ä¢ –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (album)",
        parse_mode="Markdown"
    )
    
    await state.set_state(AdStates.waiting_content)

@router.message(AdStates.waiting_content)
async def process_ad_content(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    ad_data = {
        'text': message.caption or message.text or '',
        'media': []
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
    if message.photo:
        ad_data['media'].append({
            'type': 'photo',
            'file_id': message.photo[-1].file_id
        })
    elif message.video:
        ad_data['media'].append({
            'type': 'video',
            'file_id': message.video.file_id
        })
    elif message.document:
        ad_data['media'].append({
            'type': 'document',
            'file_id': message.document.file_id
        })
    
    await state.update_data(ad_data=ad_data)
    
    kb = create_keyboard([
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏", "add_buttons"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "ad_settings"),
        ("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "send_ad"),
        ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_ad")
    ])
    
    preview_text = f"**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:**\n\n{ad_data['text']}"
    if ad_data['media']:
        preview_text += f"\n\nüìé –ú–µ–¥–∏–∞: {len(ad_data['media'])} —Ñ–∞–π–ª(–æ–≤)"
    
    await message.answer(preview_text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "add_buttons")
async def add_buttons(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîò **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 1 | https://example.com`\n"
        "`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 2 | https://example2.com`\n\n"
        "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ` | `",
        parse_mode="Markdown"
    )
    
    await state.set_state(AdStates.waiting_buttons)

@router.message(AdStates.waiting_buttons)
async def process_buttons(message: types.Message, state: FSMContext):
    buttons = []
    
    for line in message.text.split('\n'):
        if '|' in line:
            parts = line.split('|', 1)
            if len(parts) == 2:
                text = parts[0].strip()
                url = parts[1].strip()
                if text and url:
                    buttons.append({'text': text, 'url': url})
    
    if not buttons:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(buttons=buttons)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    data = await state.get_data()
    ad_data = data['ad_data']
    
    preview_text = f"**–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:**\n\n{ad_data['text']}"
    if ad_data['media']:
        preview_text += f"\n\nüìé –ú–µ–¥–∏–∞: {len(ad_data['media'])} —Ñ–∞–π–ª(–æ–≤)"
    
    preview_text += f"\n\nüîò –ö–Ω–æ–ø–∫–∏: {len(buttons)}"
    for btn in buttons:
        preview_text += f"\n‚Ä¢ {btn['text']}"
    
    kb = create_keyboard([
        ("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", "confirm_send"),
        ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_ad")
    ])
    
    await message.answer(preview_text, reply_markup=kb, parse_mode="Markdown")
    await state.set_state(AdStates.confirm)

@router.callback_query(F.data == "send_ad")
async def send_ad_without_buttons(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(buttons=[])
    await confirm_send_ad(callback, state)

@router.callback_query(F.data == "confirm_send")
async def confirm_send_ad(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ad_data = data['ad_data']
    buttons = data.get('buttons', [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    reply_markup = None
    if buttons:
        keyboard = []
        for btn in buttons:
            keyboard.append([InlineKeyboardButton(text=btn['text'], url=btn['url'])])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    status_msg = await callback.message.edit_text("üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã...**", parse_mode="Markdown")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = data.get('ad_settings', {'audience': 'all', 'rounds': 1, 'frequency': 24})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É
    result = await broadcast_service.send_ad_with_settings(
        callback.bot, 
        ad_data['text'], 
        ad_data['media'], 
        reply_markup,
        settings,
        exclude_ids=[callback.from_user.id]
    )
    
    await status_msg.edit_text(
        f"‚úÖ **–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞**\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{result['sent']}`\n"
        f"–û—à–∏–±–æ–∫: `{result['failed']}`\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{result['total']}`",
        parse_mode="Markdown"
    )
    
    await state.clear()

@router.callback_query(F.data == "ad_settings")
async def ad_settings(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º—ã**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        "`–ê—É–¥–∏—Ç–æ—Ä–∏—è: all/premium/regular`\n"
        "`–ö—Ä—É–≥–∏: 1-10`\n"
        "`–ß–∞—Å—Ç–æ—Ç–∞: 1-24`\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "`–ê—É–¥–∏—Ç–æ—Ä–∏—è: all`\n"
        "`–ö—Ä—É–≥–∏: 3`\n"
        "`–ß–∞—Å—Ç–æ—Ç–∞: 6`",
        parse_mode="Markdown"
    )
    await state.set_state(AdStates.waiting_settings)

@router.message(AdStates.waiting_settings)
async def process_ad_settings(message: types.Message, state: FSMContext):
    settings = {'audience': 'all', 'rounds': 1, 'frequency': 24}
    
    for line in message.text.split('\n'):
        if ':' in line:
            key, value = line.split(':', 1)
            key = key.strip().lower()
            value = value.strip()
            
            if '–∞—É–¥–∏—Ç–æ—Ä–∏—è' in key:
                if value in ['all', 'premium', 'regular']:
                    settings['audience'] = value
            elif '–∫—Ä—É–≥' in key:
                try:
                    rounds = int(value)
                    if 1 <= rounds <= 10:
                        settings['rounds'] = rounds
                except ValueError:
                    pass
            elif '—á–∞—Å—Ç–æ—Ç' in key:
                try:
                    freq = int(value)
                    if 1 <= freq <= 24:
                        settings['frequency'] = freq
                except ValueError:
                    pass
    
    await state.update_data(ad_settings=settings)
    
    data = await state.get_data()
    ad_data = data['ad_data']
    
    audience_text = {'all': '–í—Å–µ–º', 'premium': 'Premium', 'regular': '–û–±—ã—á–Ω—ã–º'}
    
    preview_text = f"**–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:**\n\n{ad_data['text']}"
    if ad_data['media']:
        preview_text += f"\n\nüìÅ –ú–µ–¥–∏–∞: {len(ad_data['media'])}"
    
    preview_text += f"\n\n‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
    preview_text += f"‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience_text[settings['audience']]}\n"
    preview_text += f"‚Ä¢ –ö—Ä—É–≥–æ–≤: {settings['rounds']}\n"
    preview_text += f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {settings['frequency']}—á"
    
    kb = create_keyboard([
        ("‚ûï –ö–Ω–æ–ø–∫–∏", "add_buttons"),
        ("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "send_ad"),
        ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_ad")
    ])
    
    await message.answer(preview_text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "cancel_ad")
async def cancel_ad(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ**", parse_mode="Markdown")
    await state.clear()

@router.callback_query(F.data == "ad_stats")
async def ad_stats(callback: types.CallbackQuery):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = await User.filter(is_active=True).count()
    premium_users = await User.filter(is_active=True, is_premium=True).count()
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã**\n\n"
    stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
    stats_text += f"‚≠ê Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{premium_users}`\n"
    stats_text += f"üë§ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users - premium_users}`\n\n"
    stats_text += f"üìà –û—Ö–≤–∞—Ç —Ä–µ–∫–ª–∞–º—ã: –¥–æ `{total_users}` —á–µ–ª–æ–≤–µ–∫"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", "broadcast_ads")])
    
    await callback.message.edit_text(stats_text, reply_markup=kb, parse_mode="Markdown")