from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database.db import get_db
from services.user_service import get_user_by_tg_id, update_user_profile, toggle_user_activity, get_user_activity_status
from keyboards.inline import (
    get_profile_edit_keyboard, get_help_keyboard, get_main_inline_keyboard,
    get_gender_inline_keyboard, get_orientation_inline_keyboard, get_activity_status_keyboard
)
from states.user_states import UserRegistration

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@router.callback_query(F.data == "my_profile")
async def cmd_profile(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = isinstance(message_or_callback, types.CallbackQuery)
    if is_callback:
        await message_or_callback.answer()
        user_id = message_or_callback.from_user.id
        message = message_or_callback.message
        bot = message_or_callback.bot
    else:
        user_id = message_or_callback.from_user.id
        message = message_or_callback
        bot = message.bot
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await bot.send_chat_action(user_id, "upload_photo")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    import asyncio
    await asyncio.sleep(1.0)
    
    db = next(get_db())
    user = get_user_by_tg_id(db, user_id)
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    activity_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    profile_text = (
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user.first_name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age if user.age else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü–æ–ª: {user.gender if user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {user.orientation if user.orientation else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ì–æ—Ä–æ–¥: {user.city if user.city else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–û —Å–µ–±–µ: {user.bio if user.bio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.tags if user.tags else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–°—Ç–∞—Ç—É—Å: {activity_status}"
    )
    
    if user.photo_id:
        await message.answer_photo(
            user.photo_id, 
            caption=profile_text
        )
    else:
        await message.answer(profile_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await bot.send_chat_action(user_id, "typing")
    await asyncio.sleep(0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=get_profile_edit_keyboard())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {activity_status}",
        reply_markup=get_activity_status_keyboard(user.is_active)
    )
    
    await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_inline_keyboard())

@router.callback_query(F.data == "toggle_activity")
async def toggle_activity(callback: types.CallbackQuery):
    await callback.answer()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await callback.bot.send_chat_action(callback.from_user.id, "typing")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    import asyncio
    await asyncio.sleep(0.5)
    
    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    
    if not user:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user = toggle_user_activity(db, user)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    activity_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    await callback.message.answer(
        f"–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {activity_status}\n\n"
        f"{'–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.' if user.is_active else '–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.'}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {activity_status}",
        reply_markup=get_activity_status_keyboard(user.is_active)
    )

@router.callback_query(F.data.startswith("edit_"))
async def process_edit_profile(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    
    edit_messages = {
        "name": "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:",
        "age": "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100):",
        "gender": "–í—ã–±–µ—Ä–∏ –ø–æ–ª:",
        "orientation": "–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:",
        "city": "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        "bio": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:",
        "photo": "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
        "tags": "–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    }
    
    states_map = {
        "name": UserRegistration.first_name,
        "age": UserRegistration.age,
        "gender": UserRegistration.gender,
        "orientation": UserRegistration.orientation,
        "city": UserRegistration.city,
        "bio": UserRegistration.bio,
        "photo": UserRegistration.photo,
        "tags": UserRegistration.tags
    }
    
    await callback.answer()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await callback.bot.send_chat_action(callback.from_user.id, "typing")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    import asyncio
    await asyncio.sleep(0.5)
    
    if action == "gender":
        await callback.message.answer(edit_messages[action], reply_markup=get_gender_inline_keyboard())
    elif action == "orientation":
        await callback.message.answer(edit_messages[action], reply_markup=get_orientation_inline_keyboard())
    else:
        await callback.message.answer(edit_messages[action])
    
    await state.set_state(states_map[action])
    await state.update_data(edit_mode=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("gender_"))
async def process_gender_choice(callback: types.CallbackQuery, state: FSMContext):
    gender_map = {
        "gender_male": "–ú—É–∂—Å–∫–æ–π",
        "gender_female": "–ñ–µ–Ω—Å–∫–∏–π",
        "gender_other": "–î—Ä—É–≥–æ–π"
    }
    
    gender = gender_map.get(callback.data, "–î—Ä—É–≥–æ–π")
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == UserRegistration.gender.state:
        data = await state.get_data()
        edit_mode = data.get("edit_mode", False)
        
        if edit_mode:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            await callback.bot.send_chat_action(callback.from_user.id, "typing")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
            import asyncio
            await asyncio.sleep(0.5)
            
            db = next(get_db())
            user = get_user_by_tg_id(db, callback.from_user.id)
            update_user_profile(db, user, gender=gender)
            
            await callback.message.answer(f"–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {gender}")
            await callback.message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
            await state.clear()
        else:
            await state.update_data(gender=gender)
            await callback.message.answer("–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=get_orientation_inline_keyboard())
            await state.set_state(UserRegistration.orientation)

@router.callback_query(F.data.startswith("orientation_"))
async def process_orientation_choice(callback: types.CallbackQuery, state: FSMContext):
    orientation_map = {
        "orientation_hetero": "–ì–µ—Ç–µ—Ä–æ",
        "orientation_homo": "–ì–æ–º–æ",
        "orientation_bi": "–ë–∏",
        "orientation_other": "–î—Ä—É–≥–æ–µ"
    }
    
    orientation = orientation_map.get(callback.data, "–î—Ä—É–≥–æ–µ")
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state == UserRegistration.orientation.state:
        data = await state.get_data()
        edit_mode = data.get("edit_mode", False)
        
        if edit_mode:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            await callback.bot.send_chat_action(callback.from_user.id, "typing")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
            import asyncio
            await asyncio.sleep(0.5)
            
            db = next(get_db())
            user = get_user_by_tg_id(db, callback.from_user.id)
            update_user_profile(db, user, orientation=orientation)
            
            await callback.message.answer(f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {orientation}")
            await callback.message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
            await state.clear()
        else:
            await state.update_data(orientation=orientation)
            await callback.message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?")
            await state.set_state(UserRegistration.city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(UserRegistration.first_name)
async def update_first_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, first_name=message.text)
        
        await message.answer(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {message.text}")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(first_name=message.text)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        await state.set_state(UserRegistration.age)

@router.message(UserRegistration.age)
async def update_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    
    age = int(message.text)
    if age < 18 or age > 100:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç.")
        return
    
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, age=age)
        
        await message.answer(f"–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {age}")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(age=age)
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=get_gender_inline_keyboard())
        await state.set_state(UserRegistration.gender)

@router.message(UserRegistration.gender)
async def update_gender(message: types.Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, gender=message.text)
        
        await message.answer(f"–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(gender=message.text)
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=get_orientation_inline_keyboard())
        await state.set_state(UserRegistration.orientation)

@router.message(UserRegistration.orientation)
async def update_orientation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, orientation=message.text)
        
        await message.answer(f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {message.text}")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(orientation=message.text)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?")
        await state.set_state(UserRegistration.city)

@router.message(UserRegistration.city)
async def update_city(message: types.Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, city=message.text)
        
        await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(city=message.text)
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏ –∏ —Ç.–¥.):")
        await state.set_state(UserRegistration.bio)

@router.message(UserRegistration.bio)
async def update_bio(message: types.Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, bio=message.text)
        
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(bio=message.text)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
        await state.set_state(UserRegistration.photo)

@router.message(UserRegistration.photo, F.photo)
async def update_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        await message.bot.send_chat_action(message.from_user.id, "upload_photo")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(1.0)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, photo_id=photo_id)
        
        await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(photo_id=photo_id)
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è):")
        await state.set_state(UserRegistration.tags)

@router.message(UserRegistration.photo)
async def process_invalid_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")

@router.message(UserRegistration.tags)
async def update_tags(message: types.Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)
    
    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(0.5)
        
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        update_user_profile(db, user, tags=message.text)
        
        await message.answer(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: {message.text}")
        await message.answer("–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=get_profile_edit_keyboard())
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(tags=message.text)
        
        # Get all data from state
        data = await state.get_data()
        
        # Save all data to database
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(message.from_user.id, "typing")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
        import asyncio
        await asyncio.sleep(1.0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        update_params = {}
        for field in ['first_name', 'age', 'gender', 'orientation', 'city', 'bio', 'photo_id', 'tags']:
            if field in data:
                update_params[field] = data[field]
        
        update_user_profile(db=db, user=user, **update_params)
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@router.message(Command("help"))
@router.callback_query(F.data == "help")
async def cmd_help(message_or_callback: types.Message | types.CallbackQuery):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = isinstance(message_or_callback, types.CallbackQuery)
    if is_callback:
        await message_or_callback.answer()
        message = message_or_callback.message
        bot = message_or_callback.bot
        user_id = message_or_callback.from_user.id
    else:
        message = message_or_callback
        bot = message.bot
        user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await bot.send_chat_action(user_id, "typing")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    import asyncio
    await asyncio.sleep(1.0)
    
    help_text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –ü–æ–∏—Å–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–í –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ:\n"
        "üëã –†–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
        "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n\n"
        "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        "üü¢ –ê–∫—Ç–∏–≤–µ–Ω - –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è\n"
        "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω - –¢—ã —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–∏—Å–∫–∞"
    )
    
    await message.answer(help_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await bot.send_chat_action(user_id, "typing")
    await asyncio.sleep(0.5)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=get_help_keyboard())
    await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_inline_keyboard())

@router.callback_query(F.data.startswith("help_"))
async def process_help_sections(callback: types.CallbackQuery):
    section = callback.data.split("_")[1]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await callback.bot.send_chat_action(callback.from_user.id, "typing")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    import asyncio
    await asyncio.sleep(1.0)
    
    help_sections = {
        "usage": (
            "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º\n\n"
            "1. –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞\n"
            "3. –û–±—â–∞–π—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º\n"
            "4. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ—à—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç\n"
            "5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'\n"
            "6. –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        ),
        "search": (
            "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n"
            "–ö–æ–≥–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω, –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.\n"
            "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–∞–∑—É, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –ø–æ–∏—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
            "–í–∞–∂–Ω–æ: –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º üü¢ –ê–∫—Ç–∏–≤–µ–Ω –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã."
        ),
        "profile": (
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            "–í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' —Ç—ã –º–æ–∂–µ—à—å:\n"
            "- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
            "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
            "- –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
            "- –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
            "üü¢ –ê–∫—Ç–∏–≤–µ–Ω - –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è\n"
            "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω - –¢—ã —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–∏—Å–∫–∞\n\n"
            "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!"
        ),
        "chat": (
            "üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç\n\n"
            "–í —á–∞—Ç–µ —Ç—ã –º–æ–∂–µ—à—å:\n"
            "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "- –î–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã\n\n"
            "–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º:\n"
            "üëã –†–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
            "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç - –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç"
        )
    }
    
    await callback.answer()
    await callback.message.answer(help_sections[section])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await callback.bot.send_chat_action(callback.from_user.id, "typing")
    await asyncio.sleep(0.5)
    
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º –ø–æ–º–æ—â–∏:", reply_markup=get_help_keyboard())
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_inline_keyboard())