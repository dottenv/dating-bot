from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import asyncio
from typing import Union, Optional

from database.db import get_db
from services.user_service import get_user_by_tg_id, update_user_profile, toggle_user_activity
from keyboards.inline import (
    get_main_inline_keyboard, get_profile_menu_keyboard, get_profile_edit_keyboard,
    get_gender_inline_keyboard, get_orientation_inline_keyboard, get_back_to_profile_keyboard,
    get_edit_or_back_keyboard, BACK_TO_MAIN, BACK_TO_PROFILE, EDIT_PROFILE, MY_PROFILE,
    TOGGLE_ACTIVITY, GENDER_MALE, GENDER_FEMALE, GENDER_OTHER,
    ORIENTATION_HETERO, ORIENTATION_HOMO, ORIENTATION_BI, ORIENTATION_OTHER
)
from states.user_states import UserRegistration

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == BACK_TO_MAIN)
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()

    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@router.callback_query(F.data == MY_PROFILE)
async def cmd_profile(message_or_callback: Union[Message, CallbackQuery], state: FSMContext):
    await state.clear()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    is_callback = isinstance(message_or_callback, CallbackQuery)
    if is_callback:
        await message_or_callback.answer()
        user_id = message_or_callback.from_user.id
        message = message_or_callback.message
        bot = message_or_callback.bot
    else:
        user_id = message_or_callback.from_user.id
        message = message_or_callback
        bot = message.bot

    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await bot.send_chat_action(user_id, "upload_photo")
    await asyncio.sleep(0.5)

    db = next(get_db())
    user = get_user_by_tg_id(db, user_id)

    if not user:
        if is_callback:
            await message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=None
            )
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    activity_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

    profile_text = (
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user.first_name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age if user.age else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü–æ–ª: {user.gender if user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {user.orientation if user.orientation else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ì–æ—Ä–æ–¥: {user.city if user.city else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–û —Å–µ–±–µ: {user.bio if user.bio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.tags if user.tags else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–°—Ç–∞—Ç—É—Å: {activity_status}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
    if hasattr(user, 'photo_id') and user.photo_id:
        if is_callback:
            # –î–ª—è callback –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.delete()
            sent_message = await bot.send_photo(
                user_id,
                user.photo_id,
                caption=profile_text
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await bot.send_message(
                user_id,
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:",
                reply_markup=get_profile_menu_keyboard(user.is_active)
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
            await message.answer_photo(
                user.photo_id,
                caption=profile_text
            )
            await message.answer(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:",
                reply_markup=get_profile_menu_keyboard(user.is_active)
            )
    else:
        if is_callback:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(
                profile_text,
                reply_markup=get_profile_menu_keyboard(user.is_active)
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                profile_text,
                reply_markup=get_profile_menu_keyboard(user.is_active)
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == TOGGLE_ACTIVITY)
async def toggle_activity(callback: CallbackQuery):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)

    if not user:
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=None
        )
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user = toggle_user_activity(db, user)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    activity_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    status_message = (
        f"–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {activity_status}\n\n"
        f"{'–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.' if user.is_active else '–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.'}"
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        status_message,
        reply_markup=get_profile_menu_keyboard(user.is_active)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == EDIT_PROFILE)
async def show_edit_profile_menu(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:",
        reply_markup=get_profile_edit_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@router.callback_query(F.data == BACK_TO_PROFILE)
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    await cmd_profile(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.startswith("edit_"))
async def process_edit_profile(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1] if callback.data else ""

    edit_messages = {
        "name": "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:",
        "age": "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100):",
        "gender": "–í—ã–±–µ—Ä–∏ –ø–æ–ª:",
        "orientation": "–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:",
        "city": "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        "bio": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:",
        "photo": "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
        "tags": "–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    }

    states_map = {
        "name": UserRegistration.first_name,
        "age": UserRegistration.age,
        "gender": UserRegistration.gender,
        "orientation": UserRegistration.orientation,
        "city": UserRegistration.city,
        "bio": UserRegistration.bio,
        "photo": UserRegistration.photo,
        "tags": UserRegistration.tags
    }

    await callback.answer()

    if action == "gender":
        await callback.message.edit_text(
            edit_messages[action],
            reply_markup=get_gender_inline_keyboard()
        )
    elif action == "orientation":
        await callback.message.edit_text(
            edit_messages[action],
            reply_markup=get_orientation_inline_keyboard()
        )
    else:
        await callback.message.edit_text(
            edit_messages[action],
            reply_markup=get_back_to_profile_keyboard()
        )

    await state.set_state(states_map[action])
    await state.update_data(edit_mode=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("gender_"))
async def process_gender_choice(callback: CallbackQuery, state: FSMContext):
    gender_map = {
        GENDER_MALE: "–ú—É–∂—Å–∫–æ–π",
        GENDER_FEMALE: "–ñ–µ–Ω—Å–∫–∏–π",
        GENDER_OTHER: "–î—Ä—É–≥–æ–π"
    }

    gender = gender_map.get(callback.data or "", "–î—Ä—É–≥–æ–π")
    await callback.answer()

    current_state = await state.get_state()
    if current_state == UserRegistration.gender.state:
        data = await state.get_data()
        edit_mode = data.get("edit_mode", False)

        if edit_mode:
            db = next(get_db())
            user = get_user_by_tg_id(db, callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
            if user and hasattr(user, 'id'):
                update_user_profile(db, user, gender=gender)
                await callback.message.edit_text(
                    f"–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {gender}",
                    reply_markup=get_edit_or_back_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_back_to_profile_keyboard()
                )
            await state.clear()
        else:
            await state.update_data(gender=gender)
            await callback.message.edit_text(
                "–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:",
                reply_markup=get_orientation_inline_keyboard(include_back=False)
            )
            await state.set_state(UserRegistration.orientation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("orientation_"))
async def process_orientation_choice(callback: CallbackQuery, state: FSMContext):
    orientation_map = {
        ORIENTATION_HETERO: "–ì–µ—Ç–µ—Ä–æ",
        ORIENTATION_HOMO: "–ì–æ–º–æ",
        ORIENTATION_BI: "–ë–∏",
        ORIENTATION_OTHER: "–î—Ä—É–≥–æ–µ"
    }

    orientation = orientation_map.get(callback.data or "", "–î—Ä—É–≥–æ–µ")
    await callback.answer()

    current_state = await state.get_state()
    if current_state == UserRegistration.orientation.state:
        data = await state.get_data()
        edit_mode = data.get("edit_mode", False)

        if edit_mode:
            db = next(get_db())
            user = get_user_by_tg_id(db, callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
            if user and hasattr(user, 'id'):
                update_user_profile(db, user, orientation=orientation)
                await callback.message.edit_text(
                    f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {orientation}",
                    reply_markup=get_edit_or_back_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_back_to_profile_keyboard()
                )
            await state.clear()
        else:
            await state.update_data(orientation=orientation)
            await callback.message.edit_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?")
            await state.set_state(UserRegistration.city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(UserRegistration.first_name)
async def update_first_name(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, first_name=message.text)
            await message.answer(
                f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {message.text}",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(first_name=message.text)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        await state.set_state(UserRegistration.age)

@router.message(UserRegistration.age)
async def update_age(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    age = int(message.text)
    if age < 18 or age > 100:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç.")
        return

    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, age=age)
            await message.answer(
                f"–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {age}",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(age=age)
        await message.answer(
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=get_gender_inline_keyboard(include_back=False)
        )
        await state.set_state(UserRegistration.gender)

@router.message(UserRegistration.gender)
async def update_gender(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, gender=message.text)
            await message.answer(
                f"–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(gender=message.text)
        await message.answer(
            "–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:",
            reply_markup=get_orientation_inline_keyboard(include_back=False)
        )
        await state.set_state(UserRegistration.orientation)

@router.message(UserRegistration.orientation)
async def update_orientation(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, orientation=message.text)
            await message.answer(
                f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {message.text}",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(orientation=message.text)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?")
        await state.set_state(UserRegistration.city)

@router.message(UserRegistration.city)
async def update_city(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, city=message.text)
            await message.answer(
                f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(city=message.text)
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏ –∏ —Ç.–¥.):")
        await state.set_state(UserRegistration.bio)

@router.message(UserRegistration.bio)
async def update_bio(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, bio=message.text)
            await message.answer(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(bio=message.text)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
        await state.set_state(UserRegistration.photo)

@router.message(UserRegistration.photo, F.photo)
async def update_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
        
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        await message.bot.send_chat_action(message.from_user.id, "upload_photo")
        await asyncio.sleep(0.5)

        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, photo_id=photo_id)
            await message.answer_photo(
                photo_id,
                caption="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(photo_id=photo_id)
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è):")
        await state.set_state(UserRegistration.tags)

@router.message(UserRegistration.photo)
async def process_invalid_photo(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")

@router.message(UserRegistration.tags)
async def update_tags(message: Message, state: FSMContext):
    data = await state.get_data()
    edit_mode = data.get("edit_mode", False)

    if edit_mode:
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db, user, tags=message.text)
            await message.answer(
                f"–ò–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: {message.text}",
                reply_markup=get_edit_or_back_keyboard()
            )
        else:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_profile_keyboard()
            )
        await state.clear()
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(tags=message.text)

        # Get all data from state
        data = await state.get_data()

        # Save all data to database
        db = next(get_db())
        user = get_user_by_tg_id(db, message.from_user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        update_params = {}
        for field in ['first_name', 'age', 'gender', 'orientation', 'city', 'bio', 'photo_id', 'tags']:
            if field in data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if field == 'age' and isinstance(data[field], str) and data[field].isdigit():
                    update_params[field] = int(data[field])
                else:
                    update_params[field] = data[field]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º User
        if user and hasattr(user, 'id'):
            update_user_profile(db=db, user=user, **update_params)
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()