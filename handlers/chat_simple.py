import asyncio
import datetime

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from database.db import get_db
from database.models import User
from services.user_service import get_user_by_tg_id
from services.chat_service import (
    find_available_chat_partner, create_chat, get_active_chat,
    end_chat, create_deanon_request, get_deanon_request, update_deanon_approval,
    increment_messages_count
)
from keyboards.inline import get_chat_inline_keyboard, get_deanon_keyboard, get_main_inline_keyboard, get_profile_edit_keyboard, get_cancel_search_keyboard
from states.user_states import AnonymousChatting
from utils.debug import dbg

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
message_mapping = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def setup_chat_state(state: FSMContext, chat_id: int, partner_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    await state.set_state(AnonymousChatting.chatting)
    await state.update_data(chat_id=chat_id, partner_id=partner_id)

async def send_message_to_partner(bot, partner_tg_id: int, content_type: str, content, caption=None, reply_to_message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        if content_type == "text":
            await bot.send_message(partner_tg_id, content, reply_to_message_id=reply_to_message_id)
        elif content_type == "photo":
            await bot.send_photo(partner_tg_id, content, caption=caption, reply_to_message_id=reply_to_message_id)
        elif content_type == "video":
            await bot.send_video(partner_tg_id, content, caption=caption, reply_to_message_id=reply_to_message_id)
        elif content_type == "voice":
            await bot.send_voice(partner_tg_id, content, reply_to_message_id=reply_to_message_id)
        elif content_type == "document":
            await bot.send_document(partner_tg_id, content, caption=caption, reply_to_message_id=reply_to_message_id)
        elif content_type == "audio":
            await bot.send_audio(partner_tg_id, content, caption=caption, reply_to_message_id=reply_to_message_id)
        elif content_type == "sticker":
            await bot.send_sticker(partner_tg_id, content, reply_to_message_id=reply_to_message_id)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {content_type}: {e}")
        return False

# –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def cmd_find_chat(message: types.Message, state: FSMContext):
    await state.clear()
    dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "HANDLER")
    
    db = next(get_db())
    user = get_user_by_tg_id(db, message.from_user.id)

    if not user:
        dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "HANDLER")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    active_chat = get_active_chat(db, user.id)
    if active_chat:
        dbg(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ID: {active_chat.id}", "HANDLER")
        await message.answer(
            "–¢—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_chat_inline_keyboard()
        )
        partner_id = active_chat.user2_id if active_chat.user1_id == user.id else active_chat.user1_id
        await setup_chat_state(state, active_chat.id, partner_id)
        return

    dbg(f"–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}", "HANDLER")
    await message.answer(
        "–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.",
        reply_markup=get_cancel_search_keyboard()
    )
    await state.set_state(AnonymousChatting.waiting)

    partner = await find_available_chat_partner(db, user.id)
    
    if partner:
        dbg(f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: {partner.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}", "HANDLER")
        chat = create_chat(db, user.id, partner.id)
        dbg(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç ID: {chat.id}", "HANDLER")
        
        await message.answer(
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=get_chat_inline_keyboard()
        )
        await message.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=get_chat_inline_keyboard()
        )
        await setup_chat_state(state, chat.id, partner.id)
    else:
        dbg(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤", "HANDLER")
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ú—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message()
async def handle_all_messages(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    dbg(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}", "HANDLER")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_state == AnonymousChatting.chatting.state:
        dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", "HANDLER")
        await process_chat_message(message, state)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    db = next(get_db())
    user = get_user_by_tg_id(db, message.from_user.id)
    if not user:
        dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "HANDLER")
        return

    chat = get_active_chat(db, user.id)
    if chat:
        dbg(f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ID: {chat.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "HANDLER")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
        await setup_chat_state(state, chat.id, partner_id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        dbg(f"–ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —á–∞—Ç", "HANDLER")
        await process_chat_message(message, state)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
async def process_chat_message(message: types.Message, state: FSMContext):
    dbg(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}", "CHAT")
    db = next(get_db())
    user = get_user_by_tg_id(db, message.from_user.id)
    chat = get_active_chat(db, user.id)

    if not chat:
        dbg(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞", "CHAT")
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
    partner = db.query(User).filter(User.id == partner_id).first()
    dbg(f"–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {partner_id}", "CHAT")

    if not partner:
        dbg(f"–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç {chat.id}", "CHAT")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
        end_chat(db, chat.id)
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    try:
        await message.bot.send_chat_action(partner.tg_id, "typing")
        dbg(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {partner.tg_id}", "CHAT")
    except Exception as e:
        dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {e}", "CHAT_ERROR")

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        increment_messages_count(db, chat.id)
        dbg(f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat.id}", "CHAT")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
        reply_to_message_id = None
        if message.reply_to_message:
            # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            original_message_id = message.reply_to_message.message_id
            dbg(f"–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {original_message_id}", "CHAT")
            if original_message_id in message_mapping:
                reply_to_message_id = message_mapping[original_message_id]
                dbg(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {reply_to_message_id}", "CHAT")
            else:
                dbg(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {original_message_id}", "CHAT")

        if message.text:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            typing_delay = min(len(message.text) * 0.05, 3.0)  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(typing_delay)
            dbg(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {partner.tg_id}", "CHAT")
            sent_message = await message.bot.send_message(
                partner.tg_id,
                message.text,
                reply_to_message_id=reply_to_message_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
            message_mapping[message.message_id] = sent_message.message_id
            dbg(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID: {message.message_id} -> {sent_message.message_id}", "CHAT")
        elif message.photo:
            try:
                await message.bot.send_chat_action(partner.tg_id, "upload_photo")
                await asyncio.sleep(1.0)
                sent_message = await message.bot.send_photo(
                    partner.tg_id,
                    message.photo[-1].file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                sent_message = await message.bot.send_photo(
                    partner.tg_id,
                    message.photo[-1].file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
        elif message.video:
            try:
                await message.bot.send_chat_action(partner.tg_id, "upload_video")
                await asyncio.sleep(1.0)
                sent_message = await message.bot.send_video(
                    partner.tg_id,
                    message.video.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
                sent_message = await message.bot.send_video(
                    partner.tg_id,
                    message.video.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
        elif message.voice:
            try:
                await message.bot.send_chat_action(partner.tg_id, "record_voice")
                await asyncio.sleep(0.5)
                sent_message = await message.bot.send_voice(
                    partner.tg_id,
                    message.voice.file_id,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                sent_message = await message.bot.send_voice(
                    partner.tg_id,
                    message.voice.file_id,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
        elif message.document:
            try:
                await message.bot.send_chat_action(partner.tg_id, "upload_document")
                await asyncio.sleep(1.0)
                sent_message = await message.bot.send_document(
                    partner.tg_id,
                    message.document.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                sent_message = await message.bot.send_document(
                    partner.tg_id,
                    message.document.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
        elif message.audio:
            try:
                await message.bot.send_chat_action(partner.tg_id, "upload_voice")
                await asyncio.sleep(1.0)
                sent_message = await message.bot.send_audio(
                    partner.tg_id,
                    message.audio.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
                sent_message = await message.bot.send_audio(
                    partner.tg_id,
                    message.audio.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
                message_mapping[message.message_id] = sent_message.message_id
        elif message.sticker:
            sent_message = await message.bot.send_sticker(
                partner.tg_id,
                message.sticker.file_id,
                reply_to_message_id=reply_to_message_id
            )
            message_mapping[message.message_id] = sent_message.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "request_deanon")
async def inline_deanon_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    deanon_request = get_deanon_request(db, chat.id)
    if not deanon_request:
        deanon_request = create_deanon_request(db, chat.id)

    partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
    partner = db.query(User).filter(User.id == partner_id).first()
    user_position = 1 if chat.user1_id == user.id else 2
    update_deanon_approval(db, deanon_request.id, user_position, True)

    await callback.message.answer(
        "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."
    )
    if partner:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å. –¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?",
            reply_markup=get_deanon_keyboard()
        )

@router.callback_query(F.data == "end_chat")
async def inline_end_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
    partner = db.query(User).filter(User.id == partner_id).first()

    # –û—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    global message_mapping
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    message_mapping = {}

    end_chat(db, chat.id)
    await callback.message.answer(
        "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
        reply_markup=get_main_inline_keyboard()
    )
    if partner:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
            reply_markup=get_main_inline_keyboard()
        )
    await state.clear()

@router.callback_query(F.data == "deanon_approve")
async def inline_deanon_approve(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
    partner = db.query(User).filter(User.id == partner_id).first()
    user_position = 1 if chat.user1_id == user.id else 2
    deanon_request = get_deanon_request(db, chat.id)
    if not deanon_request:
        await callback.message.answer(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        await state.set_state(AnonymousChatting.chatting)
        return

    update_deanon_approval(db, deanon_request.id, user_position, True)
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã
    deanon_request = get_deanon_request(db, chat.id)
    if deanon_request.user1_approved and deanon_request.user2_approved:
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            await callback.bot.send_chat_action(callback.from_user.id, "upload_photo")
            if partner:
                await callback.bot.send_chat_action(partner.tg_id, "upload_photo")
            await asyncio.sleep(1.0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")

        user1 = db.query(User).filter(User.id == chat.user1_id).first()
        user2 = db.query(User).filter(User.id == chat.user2_id).first()

        profile_caption_1 = (
            f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n"
            f"–ò–º—è: {user1.first_name}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user1.age}\n"
            f"–ì–æ—Ä–æ–¥: {user1.city}\n"
            f"–û —Å–µ–±–µ: {user1.bio}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user1.tags}\n"
            f"Telegram: [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={user1.tg_id})"
        )
        profile_caption_2 = (
            f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n"
            f"–ò–º—è: {user2.first_name}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user2.age}\n"
            f"–ì–æ—Ä–æ–¥: {user2.city}\n"
            f"–û —Å–µ–±–µ: {user2.bio}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user2.tags}\n"
            f"Telegram: [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={user2.tg_id})"
        )

        try:
            # user1 -> user2
            if user1.photo_id and user2:
                await callback.bot.send_photo(
                    user2.tg_id,
                    user1.photo_id,
                    caption=profile_caption_1,
                    parse_mode="Markdown"
                )
            elif user2:
                await callback.bot.send_message(
                    user2.tg_id,
                    profile_caption_1,
                    parse_mode="Markdown"
                )

            # user2 -> user1
            if user2.photo_id and user1:
                await callback.bot.send_photo(
                    user1.tg_id,
                    user2.photo_id,
                    caption=profile_caption_2,
                    parse_mode="Markdown"
                )
            elif user1:
                await callback.bot.send_message(
                    user1.tg_id,
                    profile_caption_2,
                    parse_mode="Markdown"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if user1:
                await callback.bot.send_message(
                    user1.tg_id,
                    "–õ–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=get_chat_inline_keyboard()
                )
            if user2 and user1.tg_id != callback.from_user.id:
                await callback.bot.send_message(
                    user2.tg_id,
                    "–õ–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=get_chat_inline_keyboard()
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏: {e}")
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    else:
        await callback.message.answer(
            "–¢—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."
        )
    await state.set_state(AnonymousChatting.chatting)

@router.callback_query(F.data == "deanon_reject")
async def inline_deanon_reject(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
    partner = db.query(User).filter(User.id == partner_id).first()
    user_position = 1 if chat.user1_id == user.id else 2
    deanon_request = get_deanon_request(db, chat.id)
    if not deanon_request:
        await callback.message.answer(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        await state.set_state(AnonymousChatting.chatting)
        return

    update_deanon_approval(db, deanon_request.id, user_position, False)
    await callback.message.answer(
        "–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏."
    )
    if partner:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏."
        )
    await state.set_state(AnonymousChatting.chatting)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.callback_query(F.data == "find_chat")
async def find_new_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_chat = get_active_chat(db, user.id)
    if active_chat:
        await callback.message.answer(
            "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç.",
            reply_markup=get_chat_inline_keyboard()
        )
        partner_id = active_chat.user2_id if active_chat.user1_id == user.id else active_chat.user1_id
        await setup_chat_state(state, active_chat.id, partner_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.is_active:
        await callback.message.answer(
            "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ê–∫—Ç–∏–≤–∏—Ä—É–π –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_profile_edit_keyboard()
        )
        return

    # –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await callback.message.answer(
        "–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
        reply_markup=get_cancel_search_keyboard()
    )
    await state.set_state(AnonymousChatting.waiting)

    partner = find_available_chat_partner(db, user.id)
    if not partner:
        await callback.message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ú—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è."
        )
        return

    # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    chat = create_chat(db, user.id, partner.id)
    if not chat:
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await setup_chat_state(state, chat.id, partner.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await callback.message.answer(
        "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
        reply_markup=get_chat_inline_keyboard()
    )

    try:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=get_chat_inline_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ.",
            reply_markup=get_main_inline_keyboard()
        )
        end_chat(db, chat.id)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
@router.callback_query(F.data == "chat_info")
async def chat_info(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)

    if not chat:
        await callback.message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat_duration = datetime.datetime.now() - chat.start_time
    hours, remainder = divmod(chat_duration.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    duration_str = f"{hours}—á {minutes}–º {seconds}—Å" if hours > 0 else f"{minutes}–º {seconds}—Å"

    info_text = (
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ:\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
        f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat.messages_count}\n"
    )

    await callback.message.answer(
        info_text,
        reply_markup=get_chat_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –æ–±—â–µ–Ω–∏—é
@router.callback_query(F.data == "chat_tips")
async def chat_tips(callback: types.CallbackQuery):
    await callback.answer()

    tips_text = (
        "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
        "1Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–º—ã\n"
        "2Ô∏è‚É£ –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n"
        "3Ô∏è‚É£ –ü—Ä–æ—è–≤–ª—è–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n"
        "4Ô∏è‚É£ –î–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –¥–µ—Ç–∞–ª—è–º–∏\n"
        "5Ô∏è‚É£ –£–≤–∞–∂–∞–π—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "6Ô∏è‚É£ –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤–∑–∞–∏–º–Ω—É—é —Å–∏–º–ø–∞—Ç–∏—é, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏\n"
    )

    await callback.message.answer(tips_text, reply_markup=get_chat_inline_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(AnonymousChatting.waiting)
async def cancel_search_message(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫" or message.text == "/cancel":
        await message.answer(
            "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
    else:
        await message.answer(
            "–¢—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –º—ã –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –ø–∞—Ä—É, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫\" –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_cancel_search_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.callback_query(F.data == "cancel_search")
async def cancel_search_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    current_state = await state.get_state()
    if current_state == AnonymousChatting.waiting.state:
        await callback.message.answer(
            "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
    else:
        await callback.message.answer(
            "–¢—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_inline_keyboard()
        )
