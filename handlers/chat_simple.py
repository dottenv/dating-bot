import asyncio
import datetime
import time
from typing import Optional, Tuple

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from database.db import get_db
from database.models import User, AnonymousChat
from services.user_service import get_user_by_tg_id
from services.chat_service import (
    find_available_chat_partner, create_chat, get_active_chat,
    end_chat, create_deanon_request, get_deanon_request, update_deanon_approval
)
from keyboards.inline import (
    get_chat_inline_keyboard, get_deanon_keyboard, get_main_inline_keyboard, 
    get_profile_edit_keyboard, get_cancel_search_keyboard, get_confirm_chat_keyboard,
    FIND_CHAT, END_CHAT, REQUEST_DEANON, CHAT_INFO, REPORT_USER,
    DEANON_APPROVE, DEANON_REJECT, CANCEL_SEARCH, CONFIRM_CHAT, REJECT_CHAT
)
from states.user_states import AnonymousChatting
from utils.debug import dbg
from handlers.chat_message_handler import process_chat_message, clear_message_mapping_for_chat

router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def setup_chat_state(state: FSMContext, chat_id: int, partner_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    await state.set_state(AnonymousChatting.chatting)
    await state.update_data(chat_id=chat_id, partner_id=partner_id)

async def get_partner_info(db, chat: AnonymousChat, user_id: int) -> Tuple[int, Optional[User]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –≤ —á–∞—Ç–µ"""
    partner_id = chat.user2_id if chat.user1_id == user_id else chat.user1_id
    partner = db.query(User).filter(User.id == partner_id).first()
    return partner_id, partner

# –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def cmd_find_chat(message: types.Message, state: FSMContext):
    await state.clear()
    dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "HANDLER")
    
    db = next(get_db())
    user = get_user_by_tg_id(db, message.from_user.id)

    if not user:
        dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "HANDLER")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    active_chat = get_active_chat(db, user.id)
    if active_chat:
        dbg(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ID: {active_chat.id}", "HANDLER")
        await message.answer(
            "–¢—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_chat_inline_keyboard()
        )
        partner_id = active_chat.user2_id if active_chat.user1_id == user.id else active_chat.user1_id
        await setup_chat_state(state, active_chat.id, partner_id)
        return

    dbg(f"–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}", "HANDLER")
    search_message = await message.answer(
        "–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.",
        reply_markup=get_cancel_search_keyboard()
    )
    await state.set_state(AnonymousChatting.waiting)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(search_message_id=search_message.message_id)

    partner, alternative_partners, result_message = await find_available_chat_partner(db, user.id)
    
    if partner:
        dbg(f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: {partner.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}", "HANDLER")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        if "–Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º" in result_message:
            dbg(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º", "HANDLER")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(pending_partner_id=partner.id)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            await message.bot.edit_message_text(
                "–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?",
                chat_id=message.chat.id,
                message_id=search_message.message_id,
                reply_markup=get_confirm_chat_keyboard()
            )
            await state.set_state(AnonymousChatting.confirming)
            return
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ
        chat = create_chat(db, user.id, partner.id)
        dbg(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç ID: {chat.id}", "HANDLER")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        await message.bot.edit_message_text(
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            chat_id=message.chat.id,
            message_id=search_message.message_id,
            reply_markup=get_chat_inline_keyboard()
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
            await message.bot.send_message(
                partner.tg_id,
                "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
                reply_markup=get_chat_inline_keyboard()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await setup_chat_state(state, chat.id, partner.id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_state = FSMContext(message.bot.storage, partner.tg_id, partner.tg_id)
            await setup_chat_state(partner_state, chat.id, user.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            from handlers.chat_message_handler import active_chat_cache
            current_time = time.time()
            active_chat_cache[user.id] = (chat, current_time)
            active_chat_cache[partner.id] = (chat, current_time)
            
        except Exception as e:
            dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É: {e}", "CHAT_ERROR")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
            end_chat(db, chat.id)
            await message.bot.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                chat_id=message.chat.id,
                message_id=search_message.message_id,
                reply_markup=get_main_inline_keyboard()
            )
            await state.clear()
    else:
        dbg(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤: {result_message}", "HANDLER")
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        await message.bot.edit_message_text(
            result_message or "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ú—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è.",
            chat_id=message.chat.id,
            message_id=search_message.message_id,
            reply_markup=get_main_inline_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message()
async def handle_all_messages(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    dbg(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}", "HANDLER")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_state == AnonymousChatting.chatting.state:
        dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", "HANDLER")
        await process_chat_message(message, state)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    db = next(get_db())
    user = get_user_by_tg_id(db, message.from_user.id)
    if not user:
        dbg(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "HANDLER")
        return

    chat = get_active_chat(db, user.id)
    if chat:
        dbg(f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç ID: {chat.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "HANDLER")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        partner_id = chat.user2_id if chat.user1_id == user.id else chat.user1_id
        await setup_chat_state(state, chat.id, partner_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        partner = db.query(User).filter(User.id == partner_id).first()
        if not partner:
            dbg(f"–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç {chat.id}", "HANDLER")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
            end_chat(db, chat.id)
            await state.clear()
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        dbg(f"–ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —á–∞—Ç", "HANDLER")
        await process_chat_message(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == REQUEST_DEANON)
async def inline_deanon_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    deanon_request = get_deanon_request(db, chat.id)
    if not deanon_request:
        deanon_request = create_deanon_request(db, chat.id)

    partner_id, partner = await get_partner_info(db, chat, user.id)
    user_position = 1 if chat.user1_id == user.id else 2
    update_deanon_approval(db, deanon_request.id, user_position, True)

    await callback.message.edit_text(
        "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
        reply_markup=get_chat_inline_keyboard()
    )
    
    if partner:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å. –¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?",
            reply_markup=get_deanon_keyboard()
        )

@router.callback_query(F.data == END_CHAT)
async def inline_end_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id, partner = await get_partner_info(db, chat, user.id)

    # –û—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    clear_message_mapping_for_chat(chat.id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
    end_chat(db, chat.id)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    from handlers.chat_message_handler import active_chat_cache
    active_chat_cache.pop(user.id, None)
    if partner:
        active_chat_cache.pop(partner.id, None)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text(
        "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
        reply_markup=get_main_inline_keyboard()
    )
    
    if partner:
        try:
            await callback.bot.send_message(
                partner.tg_id,
                "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
                reply_markup=get_main_inline_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_state = FSMContext(callback.bot.storage, partner.tg_id, partner.tg_id)
            await partner_state.clear()
        except Exception as e:
            dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}", "CHAT_ERROR")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()

@router.callback_query(F.data == DEANON_APPROVE)
async def inline_deanon_approve(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id, partner = await get_partner_info(db, chat, user.id)
    user_position = 1 if chat.user1_id == user.id else 2
    deanon_request = get_deanon_request(db, chat.id)
    if not deanon_request:
        await callback.message.edit_text(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_chat_inline_keyboard()
        )
        await state.set_state(AnonymousChatting.chatting)
        return

    update_deanon_approval(db, deanon_request.id, user_position, True)
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã
    deanon_request = get_deanon_request(db, chat.id)
    
    if deanon_request.user1_approved and deanon_request.user2_approved:
        await process_deanon_reveal(callback, chat, db)
    else:
        await callback.message.edit_text(
            "–¢—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_chat_inline_keyboard()
        )
    
    await state.set_state(AnonymousChatting.chatting)

async def process_deanon_reveal(callback: types.CallbackQuery, chat: AnonymousChat, db):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        user1 = db.query(User).filter(User.id == chat.user1_id).first()
        user2 = db.query(User).filter(User.id == chat.user2_id).first()
        
        if user1:
            await callback.bot.send_chat_action(user1.tg_id, "upload_photo")
        if user2:
            await callback.bot.send_chat_action(user2.tg_id, "upload_photo")
        await asyncio.sleep(1.0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        profile1 = format_user_profile(user1)
        profile2 = format_user_profile(user2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await send_profile_to_user(callback.bot, user1, user2, profile2)
        await send_profile_to_user(callback.bot, user2, user1, profile1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        final_message = "–õ–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ."
        if user1:
            await callback.bot.send_message(
                user1.tg_id, final_message, reply_markup=get_chat_inline_keyboard()
            )
        if user2 and user1.tg_id != callback.from_user.id:
            await callback.bot.send_message(
                user2.tg_id, final_message, reply_markup=get_chat_inline_keyboard()
            )
    except Exception as e:
        dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏: {e}", "CHAT_ERROR")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_chat_inline_keyboard()
        )

def format_user_profile(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n"
        f"–ò–º—è: {user.first_name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
        f"–ì–æ—Ä–æ–¥: {user.city}\n"
        f"–û —Å–µ–±–µ: {user.bio}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.tags}\n"
        f"Telegram: [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={user.tg_id})"
    )

async def send_profile_to_user(bot, recipient: User, sender: User, profile_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
    if not recipient:
        return
        
    if sender and sender.photo_id:
        await bot.send_photo(
            recipient.tg_id,
            sender.photo_id,
            caption=profile_text,
            parse_mode="Markdown"
        )
    else:
        await bot.send_message(
            recipient.tg_id,
            profile_text,
            parse_mode="Markdown"
        )

@router.callback_query(F.data == DEANON_REJECT)
async def inline_deanon_reject(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)
    if not chat:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    partner_id, partner = await get_partner_info(db, chat, user.id)
    user_position = 1 if chat.user1_id == user.id else 2
    deanon_request = get_deanon_request(db, chat.id)
    if not deanon_request:
        await callback.message.edit_text(
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_chat_inline_keyboard()
        )
        await state.set_state(AnonymousChatting.chatting)
        return

    update_deanon_approval(db, deanon_request.id, user_position, False)
    await callback.message.edit_text(
        "–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏.",
        reply_markup=get_chat_inline_keyboard()
    )
    
    if partner:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏.",
            reply_markup=get_chat_inline_keyboard()
        )
    
    await state.set_state(AnonymousChatting.chatting)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.callback_query(F.data == FIND_CHAT)
async def find_new_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_chat = get_active_chat(db, user.id)
    if active_chat:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç.",
            reply_markup=get_chat_inline_keyboard()
        )
        partner_id = active_chat.user2_id if active_chat.user1_id == user.id else active_chat.user1_id
        await setup_chat_state(state, active_chat.id, partner_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.is_active:
        await callback.message.edit_text(
            "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ê–∫—Ç–∏–≤–∏—Ä—É–π –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_profile_edit_keyboard()
        )
        return

    # –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await callback.message.edit_text(
        "–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
        reply_markup=get_cancel_search_keyboard()
    )
    await state.set_state(AnonymousChatting.waiting)

    partner, alternative_partners, message = await find_available_chat_partner(db, user.id)
    if not partner:
        await callback.message.edit_text(
            message or "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ú—ã —É–≤–µ–¥–æ–º–∏–º —Ç–µ–±—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è.",
            reply_markup=get_main_inline_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    chat = create_chat(db, user.id, partner.id)
    if not chat:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await setup_chat_state(state, chat.id, partner.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await callback.message.edit_text(
        "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
        reply_markup=get_chat_inline_keyboard()
    )

    try:
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=get_chat_inline_keyboard()
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partner_state = FSMContext(callback.bot.storage, partner.tg_id, partner.tg_id)
        await setup_chat_state(partner_state, chat.id, user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        from handlers.chat_message_handler import active_chat_cache
        current_time = time.time()
        active_chat_cache[user.id] = (chat, current_time)
        active_chat_cache[partner.id] = (chat, current_time)
        
    except Exception as e:
        dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É: {e}", "CHAT_ERROR")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ.",
            reply_markup=get_main_inline_keyboard()
        )
        end_chat(db, chat.id)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
@router.callback_query(F.data == CHAT_INFO)
async def chat_info(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    chat = get_active_chat(db, user.id)

    if not chat:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat_duration = datetime.datetime.now() - chat.start_time
    hours, remainder = divmod(chat_duration.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    duration_str = f"{hours}—á {minutes}–º {seconds}—Å" if hours > 0 else f"{minutes}–º {seconds}—Å"

    info_text = (
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ:\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
        f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat.messages_count}\n"
    )

    await callback.message.edit_text(
        info_text,
        reply_markup=get_chat_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –æ–±—â–µ–Ω–∏—é
@router.callback_query(F.data == "chat_tips")
async def chat_tips(callback: types.CallbackQuery):
    await callback.answer()

    tips_text = (
        "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
        "1Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–º—ã\n"
        "2Ô∏è‚É£ –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n"
        "3Ô∏è‚É£ –ü—Ä–æ—è–≤–ª—è–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É\n"
        "4Ô∏è‚É£ –î–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –¥–µ—Ç–∞–ª—è–º–∏\n"
        "5Ô∏è‚É£ –£–≤–∞–∂–∞–π—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "6Ô∏è‚É£ –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤–∑–∞–∏–º–Ω—É—é —Å–∏–º–ø–∞—Ç–∏—é, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏\n"
    )

    await callback.message.edit_text(
        tips_text,
        reply_markup=get_chat_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(AnonymousChatting.waiting)
async def cancel_search_message(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫" or message.text == "/cancel":
        data = await state.get_data()
        search_message_id = data.get("search_message_id")
        
        if search_message_id:
            try:
                await message.bot.edit_message_text(
                    "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
                    chat_id=message.chat.id,
                    message_id=search_message_id,
                    reply_markup=get_main_inline_keyboard()
                )
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã
                await message.delete()
            except Exception as e:
                dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", "CHAT_ERROR")
                await message.answer(
                    "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=get_main_inline_keyboard()
                )
        else:
            await message.answer(
                "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=get_main_inline_keyboard()
            )
        
        await state.clear()
    else:
        await message.answer(
            "–¢—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –º—ã –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –ø–∞—Ä—É, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫\" –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_cancel_search_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
@router.callback_query(F.data == CONFIRM_CHAT)
async def confirm_chat_with_low_rating(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    partner_id = data.get("pending_partner_id")
    
    if not partner_id:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return
    
    db = next(get_db())
    user = get_user_by_tg_id(db, callback.from_user.id)
    partner = db.query(User).filter(User.id == partner_id).first()
    
    if not partner:
        await callback.message.edit_text(
            "–ü–∞—Ä—Ç–Ω–µ—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –≤ —á–∞—Ç–µ
    partner_chat = get_active_chat(db, partner.id)
    if partner_chat:
        await callback.message.edit_text(
            "–ü–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    chat = create_chat(db, user.id, partner.id)
    if not chat:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
        reply_markup=get_chat_inline_keyboard()
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
        await callback.bot.send_message(
            partner.tg_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=get_chat_inline_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await setup_chat_state(state, chat.id, partner.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partner_state = FSMContext(callback.bot.storage, partner.tg_id, partner.tg_id)
        await setup_chat_state(partner_state, chat.id, user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        from handlers.chat_message_handler import active_chat_cache
        current_time = time.time()
        active_chat_cache[user.id] = (chat, current_time)
        active_chat_cache[partner.id] = (chat, current_time)
        
    except Exception as e:
        dbg(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É: {e}", "CHAT_ERROR")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
        end_chat(db, chat.id)
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
@router.callback_query(F.data == REJECT_CHAT)
async def reject_chat_with_low_rating(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º. –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
        reply_markup=get_main_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.callback_query(F.data == CANCEL_SEARCH)
async def cancel_search_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    current_state = await state.get_state()
    if current_state in [AnonymousChatting.waiting.state, AnonymousChatting.confirming.state]:
        await callback.message.edit_text(
            "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_inline_keyboard()
        )
        await state.clear()
    else:
        await callback.message.edit_text(
            "–¢—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=get_main_inline_keyboard()
        )