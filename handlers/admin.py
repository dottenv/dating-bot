from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import time

from database.models import User, Profile, Ban
from datetime import datetime, timedelta
from keyboards.profile import create_keyboard

router = Router()

class AdminStates(StatesGroup):
    confirming_action = State()

# –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤ –±–∞–∑–µ

@router.callback_query(F.data.startswith("admin_ban_"))
async def admin_ban_user(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data.startswith("admin_ban_"):
        return
    
    parts = callback.data.split("_")
    duration = parts[2]  # 1h, 1d, perm
    user_id = int(parts[3])
    
    user = await User.filter(tg_id=user_id).first()
    profile = await Profile.filter(user=user).first()
    
    if duration == "1h":
        ban_text = "–Ω–∞ 1 —á–∞—Å"
    elif duration == "1d":
        ban_text = "–Ω–∞ 1 –¥–µ–Ω—å"
    elif duration == "perm":
        ban_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = create_keyboard([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_ban_{user_id}_{duration}"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action")
    ])
    
    await callback.message.edit_text(
        f"üö´ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile.first_name} (ID: {user_id}) {ban_text}",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data.startswith("admin_rating_"))
async def admin_change_rating(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[2])
    change = int(parts[3])
    
    user = await User.filter(tg_id=user_id).first()
    profile = await Profile.filter(user=user).first()
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    action_text = f"{'–ø–æ–≤—ã—Å–∏—Ç—å' if change > 0 else '–ø–æ–Ω–∏–∑–∏—Ç—å'} —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ {abs(change)}"
    confirm_kb = create_keyboard([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_rating_{user_id}_{change}"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action")
    ])
    
    await callback.message.edit_text(
        f"üìä –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: {action_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {profile.first_name} (ID: {user_id})\n–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {user.raiting}",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data.startswith("admin_amnesty_"))
async def admin_amnesty(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    
    user = await User.filter(tg_id=user_id).first()
    profile = await Profile.filter(user=user).first()
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = create_keyboard([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_amnesty_{user_id}"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action")
    ])
    
    await callback.message.edit_text(
        f"üïäÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–º–Ω–∏—Å—Ç–∏—é –¥–ª—è {profile.first_name} (ID: {user_id})\n‚Ä¢ –°–Ω—è—Ç–∏–µ –±–∞–Ω–∞\n‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ 100",
        reply_markup=confirm_kb
    )

@router.callback_query(F.data.startswith("admin_dismiss_"))
async def admin_dismiss_report(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    reporter_id = int(parts[2])
    reported_id = int(parts[3])
    
    reporter = await User.filter(tg_id=reporter_id).first()
    reporter_profile = await Profile.filter(user=reporter).first()
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = create_keyboard([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_dismiss_{reporter_id}"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action")
    ])
    
    await callback.message.edit_text(
        f"‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ {reporter_profile.first_name} (ID: {reporter_id}) –∑–∞ –ª–æ–∂–Ω—É—é –∂–∞–ª–æ–±—É (-30 —Ä–µ–π—Ç–∏–Ω–≥–∞)",
        reply_markup=confirm_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
@router.callback_query(F.data.startswith("confirm_ban_"))
async def confirm_ban(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[2])
    duration = parts[3]
    
    user = await User.filter(tg_id=user_id).first()
    profile = await Profile.filter(user=user).first()
    admin = await User.filter(tg_id=callback.from_user.id).first()
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –±–∞–Ω—ã
    await Ban.filter(user=user, is_active=True).update(is_active=False)
    
    if duration == "perm":
        # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω
        await Ban.create(
            user=user,
            banned_by=admin,
            ban_type="permanent",
            reason="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω –ø–æ –∂–∞–ª–æ–±–µ"
        )
        await User.filter(id=user.id).update(is_banned=True)
        result_text = f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"
    else:
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
        ban_hours = 1 if duration == "1h" else 24
        expires_at = datetime.now() + timedelta(hours=ban_hours)
        
        await Ban.create(
            user=user,
            banned_by=admin,
            ban_type="temp",
            duration_hours=ban_hours,
            expires_at=expires_at,
            reason=f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ {ban_hours} —á–∞—Å(–æ–≤)"
        )
        result_text = f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile.first_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {ban_hours} —á–∞—Å(–æ–≤)"
    
    await callback.message.edit_text(f"‚úÖ {result_text}")

@router.callback_query(F.data.startswith("confirm_rating_"))
async def confirm_rating(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[2])
    change = int(parts[3])
    
    user = await User.filter(tg_id=user_id).first()
    profile = await Profile.filter(user=user).first()
    
    old_rating = user.raiting
    new_rating = max(0, min(1000, old_rating + change))
    await User.filter(id=user.id).update(raiting=new_rating)
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {profile.first_name} –∏–∑–º–µ–Ω–µ–Ω: {old_rating} ‚Üí {new_rating} ({change:+d})"
    )

@router.callback_query(F.data.startswith("confirm_amnesty_"))
async def confirm_amnesty(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    
    user = await User.filter(tg_id=user_id).first()
    profile = await Profile.filter(user=user).first()
    
    # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –±–∞–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    await Ban.filter(user=user, is_active=True).update(is_active=False)
    await User.filter(id=user.id).update(is_banned=False, raiting=100)
    
    await callback.message.edit_text(f"‚úÖ –ê–º–Ω–∏—Å—Ç–∏—è –¥–ª—è {profile.first_name}: –±–∞–Ω —Å–Ω—è—Ç, —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ 100")

@router.callback_query(F.data.startswith("confirm_dismiss_"))
async def confirm_dismiss(callback: types.CallbackQuery):
    reporter_id = int(callback.data.split("_")[2])
    
    reporter = await User.filter(tg_id=reporter_id).first()
    reporter_profile = await Profile.filter(user=reporter).first()
    
    # –ù–∞–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ –ª–æ–∂–Ω—É—é –∂–∞–ª–æ–±—É
    new_rating = max(0, reporter.raiting - 30)
    await User.filter(id=reporter.id).update(raiting=new_rating)
    
    await callback.message.edit_text(f"‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. {reporter_profile.first_name} –Ω–∞–∫–∞–∑–∞–Ω –∑–∞ –ª–æ–∂–Ω—É—é –∂–∞–ª–æ–±—É (-30 —Ä–µ–π—Ç–∏–Ω–≥–∞)")

@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def is_banned(user_id: int) -> bool:
    user = await User.filter(tg_id=user_id).first()
    if not user:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω
    if user.is_banned:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–Ω—ã
    active_ban = await Ban.filter(
        user=user, 
        is_active=True, 
        ban_type="temp",
        expires_at__gt=datetime.now()
    ).first()
    
    if active_ban:
        return True
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–∞–Ω—ã
    await Ban.filter(
        user=user,
        is_active=True,
        ban_type="temp",
        expires_at__lt=datetime.now()
    ).update(is_active=False)
    
    return False