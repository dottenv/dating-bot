from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from database.models import User, Profile, Ban
from keyboards.profile import create_keyboard
from services.ai_moderation import ai_moderator
from services.cache import profile_cache
from utils.admin_helpers import safe_edit_message
import time

router = Router()

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        await message.answer("**–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**")
        return
    
    kb = create_keyboard([
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
        ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"),
        ("üö´ –ú–æ–¥–µ—Ä–∞—Ü–∏—è", "admin_moderation"),
        ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast"),
        ("üîß Updates", "admin_updates"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "admin_settings")
    ])
    
    await message.answer("**–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    from handlers.chat import active_chats, search_queue
    
    total_users = await User.all().count()
    active_users = await User.filter(is_active=True).count()
    premium_users = await User.filter(is_premium=True).count()
    banned_users = await Ban.filter(is_active=True).count()
    
    in_chat = len(active_chats) // 2
    in_queue = sum(len(queue) for queue in search_queue.values())
    
    stats_text = f"""**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: `{total_users}`
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active_users}`
‚Ä¢ Premium: `{premium_users}`
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: `{banned_users}`

**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í —á–∞—Ç–µ: `{in_chat}`
‚Ä¢ –í –ø–æ–∏—Å–∫–µ: `{in_queue}`
‚Ä¢ –û–Ω–ª–∞–π–Ω: `{active_users}`

**–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –ö—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π: `{len(profile_cache.cache)}`
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏—è: `{len(ai_moderator.violation_history)}`"""
    
    kb = create_keyboard([("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_stats"), ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_back")])
    try:
        await callback.message.edit_text(stats_text, reply_markup=kb, parse_mode="Markdown")
    except:
        pass

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: types.CallbackQuery):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    kb = create_keyboard([
        ("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "users_list_0"),
        ("üìã –¢–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É", "admin_top_rating"),
        ("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ", "admin_problem_users"),
        ("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "admin_banned_users"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_back")
    ])
    
    try:
        await callback.message.edit_text("**üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**", reply_markup=kb, parse_mode="Markdown")
    except:
        pass

@router.callback_query(F.data == "admin_user_search")
async def admin_user_search(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "**üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "`/find_user <ID>` - –ø–æ ID\n"
            "`/user_info <ID>` - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ\n"
            "`/ban_user <ID> [1h|1d|perm]` - –∑–∞–±–∞–Ω–∏—Ç—å\n"
            "`/set_rating <ID> <—Ä–µ–π—Ç–∏–Ω–≥>` - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥\n"
            "`/make_premium <ID>` - –¥–∞—Ç—å Premium",
            parse_mode="Markdown"
        )
    except:
        pass

@router.callback_query(F.data == "admin_problem_users")
async def admin_problem_users(callback: types.CallbackQuery):
    problem_users = await User.filter(raiting__lt=50, is_active=True).order_by('raiting').limit(10)
    
    text = "**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
    
    for user in problem_users:
        profile = await Profile.filter(user=user).first()
        name = profile.first_name if profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        text += f"`{user.tg_id}` {name} - {user.raiting} –±–∞–ª–ª–æ–≤\n"
    
    if not problem_users:
        text += "–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_users")])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_banned_users")
async def admin_banned_users(callback: types.CallbackQuery):
    banned = await Ban.filter(is_active=True).limit(10).prefetch_related('user')
    
    text = "**üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
    
    for ban in banned:
        text += f"`{ban.user.tg_id}` - {ban.ban_type}\n"
        if ban.expires_at:
            text += f"–î–æ: {ban.expires_at.strftime('%d.%m %H:%M')}\n"
        text += f"–ü—Ä–∏—á–∏–Ω–∞: {ban.reason}\n\n"
    
    if not banned:
        text += "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_users")])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: types.CallbackQuery):
    kb = create_keyboard([
        ("üìä –õ–∏–º–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã", "admin_limits"),
        ("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", "admin_ai_settings"),
        ("üìù –õ–æ–≥–∏", "admin_logs"),
        ("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏", "admin_permissions"),
        ("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞", "admin_cleanup"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_back")
    ])
    
    await callback.message.edit_text("**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**", reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_limits")
async def admin_limits(callback: types.CallbackQuery):
    from handlers.chat import active_chats, search_queue
    
    max_users_in_chat = 1000
    max_queue_size = 500
    current_chats = len(active_chats) // 2
    current_queue = sum(len(queue) for queue in search_queue.values())
    
    text = f"**üìä –õ–∏–º–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã**\n\n"
    text += f"**–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:**\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: `{current_chats}/{max_users_in_chat}`\n"
    text += f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞: `{current_queue}/{max_queue_size}`\n\n"
    
    text += f"**–õ–∏–º–∏—Ç—ã:**\n"
    text += f"‚Ä¢ –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: `{max_users_in_chat}`\n"
    text += f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: `{max_queue_size}`\n"
    text += f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: `60 —Å–µ–∫`\n"
    text += f"‚Ä¢ –ê–Ω—Ç–∏—Ñ–ª—É–¥: `3 —Å–µ–∫`\n\n"
    
    if current_chats > max_users_in_chat * 0.8:
        status = "üî¥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    elif current_chats > max_users_in_chat * 0.5:
        status = "üü° –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    else:
        status = "üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    
    text += f"**–°—Ç–∞—Ç—É—Å:** {status}"
    
    kb = create_keyboard([
        ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_limits"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_settings")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_ai_settings")
async def admin_ai_settings(callback: types.CallbackQuery):
    text = f"**ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò**\n\n"
    text += f"**–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n"
    text += f"‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: `–í–∫–ª—é—á–µ–Ω–∞`\n"
    text += f"‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏ –¥–µ–∞–Ω–æ–Ω–∞: `–í–∫–ª—é—á–µ–Ω–∞`\n"
    text += f"‚Ä¢ –°–ø–∞–º: `–í–∫–ª—é—á–µ–Ω–∞`\n"
    text += f"‚Ä¢ 18+ –∫–æ–Ω—Ç–µ–Ω—Ç: `–í–∫–ª—é—á–µ–Ω–∞`\n\n"
    
    text += f"**–ü–æ–¥–±–æ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤:**\n"
    text += f"‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ–¥—É: `+100 –±–∞–ª–ª–æ–≤`\n"
    text += f"‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–ª–∏: `+50 –±–∞–ª–ª–æ–≤`\n"
    text += f"‚Ä¢ –ë–ª–∏–∑–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç: `+10-30 –±–∞–ª–ª–æ–≤`\n"
    text += f"‚Ä¢ –û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: `+5-20 –±–∞–ª–ª–æ–≤`\n\n"
    
    text += f"**–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ò–ò:**\n"
    text += f"‚Ä¢ You.com: `–ê–∫—Ç–∏–≤–µ–Ω`\n"
    text += f"‚Ä¢ Bing: `–†–µ–∑–µ—Ä–≤`\n"
    text += f"‚Ä¢ ChatgptAi: `–†–µ–∑–µ—Ä–≤`"
    
    kb = create_keyboard([
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "admin_mod_settings"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_settings")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_logs")
async def admin_logs(callback: types.CallbackQuery):
    import os
    
    log_file = "bot.log"
    if os.path.exists(log_file):
        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()[-20:]
        
        text = f"**üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏**\n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:**\n"
        
        for line in lines:
            if line.strip():
                short_line = line.strip()[:80] + "..." if len(line.strip()) > 80 else line.strip()
                text += f"`{short_line}`\n"
    else:
        text = "**üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏**\n\n–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    kb = create_keyboard([
        ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_logs"),
        ("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", "admin_clear_logs"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_settings")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_permissions")
async def admin_permissions(callback: types.CallbackQuery):
    admins = await User.filter(is_admin=True).all()
    premium_users = await User.filter(is_premium=True).count()
    
    text = f"**üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏**\n\n"
    text += f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(admins)}):**\n"
    
    for admin in admins:
        profile = await Profile.filter(user=admin).first()
        name = profile.first_name if profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        text += f"‚Ä¢ `{admin.tg_id}` {name}\n"
    
    text += f"\n**Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** `{premium_users}`\n\n"
    text += f"**–ö–æ–º–∞–Ω–¥—ã:**\n"
    text += f"`/make_admin <ID>` - –¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞\n"
    text += f"`/remove_admin <ID>` - —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞\n"
    text += f"`/make_premium <ID>` - –¥–∞—Ç—å Premium\n"
    text += f"`/remove_premium <ID>` - —É–±—Ä–∞—Ç—å Premium"
    
    kb = create_keyboard([
        ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_permissions"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_settings")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_clear_logs")
async def admin_clear_logs(callback: types.CallbackQuery):
    import os
    
    log_file = "bot.log"
    if os.path.exists(log_file):
        open(log_file, 'w').close()
        await callback.answer("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    else:
        await callback.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await admin_logs(callback)

@router.callback_query(F.data == "admin_mod_settings")
async def admin_mod_settings(callback: types.CallbackQuery):
    from services.ai_moderation import ai_moderator
    
    text = f"**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
    text += f"–ü–æ—Ä–æ–≥–∏ –∞–≤—Ç–æ–±–∞–Ω–æ–≤:\n"
    for violation_type, threshold in ai_moderator.auto_ban_thresholds.items():
        text += f"‚Ä¢ {violation_type}: `{threshold}` –Ω–∞—Ä—É—à–µ–Ω–∏–π\n"
    
    text += f"\n–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π: `{len(ai_moderator.violation_history)}`"
    
    kb = create_keyboard([
        ("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "admin_clear_violations"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_moderation")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_clear_violations")
async def admin_clear_violations(callback: types.CallbackQuery):
    from services.ai_moderation import ai_moderator
    
    count = len(ai_moderator.violation_history)
    ai_moderator.violation_history.clear()
    
    await callback.answer(f"–û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
    await admin_mod_settings(callback)

@router.callback_query(F.data == "admin_cleanup")
async def admin_cleanup(callback: types.CallbackQuery):
    from services.cache import profile_cache
    
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    cache_count = len(profile_cache.cache)
    profile_cache.cache.clear()
    profile_cache.timestamps.clear()
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤
    from datetime import datetime
    expired_bans = await Ban.filter(expires_at__lt=datetime.now(), is_active=True).update(is_active=False)
    
    text = f"**üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞**\n\n"
    text += f"–û—á–∏—â–µ–Ω –∫—ç—à: `{cache_count}` –∑–∞–ø–∏—Å–µ–π\n"
    text += f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –±–∞–Ω–æ–≤: `{expired_bans}`"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_settings")])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_moderation")
async def admin_moderation(callback: types.CallbackQuery):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    recent_violations = []
    for user_id, violations in ai_moderator.violation_history.items():
        for violation in violations[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            recent_violations.append((user_id, violation))
    
    recent_violations.sort(key=lambda x: x[1]['timestamp'], reverse=True)
    
    text = "**üö´ –ú–æ–¥–µ—Ä–∞—Ü–∏—è**\n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:**\n"
    
    for user_id, violation in recent_violations[:10]:
        user_profile = await profile_cache.get_profile(user_id)
        name = user_profile['first_name'] if user_profile else f"ID{user_id}"
        violation_time = time.strftime("%H:%M", time.localtime(violation['timestamp']))
        text += f"‚Ä¢ `{violation_time}` {name}: {violation['type']} - {violation['reason']}\n"
    
    kb = create_keyboard([
        ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_moderation"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "admin_mod_settings"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_back")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    kb = create_keyboard([
        ("üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "broadcast_all"),
        ("‚≠ê –¢–æ–ª—å–∫–æ Premium", "broadcast_premium"),
        ("üéØ –ü–æ –≥–æ—Ä–æ–¥–∞–º", "broadcast_cities"),
        ("üì∫ –†–µ–∫–ª–∞–º–∞", "broadcast_ads"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_back")
    ])
    
    await callback.message.edit_text("**üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**", reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    user = await User.filter(tg_id=callback.from_user.id).first()
    if not user or not user.is_admin:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    kb = create_keyboard([
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
        ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"),
        ("üö´ –ú–æ–¥–µ—Ä–∞—Ü–∏—è", "admin_moderation"),
        ("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "admin_broadcast"),
        ("üîß Updates", "admin_updates"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "admin_settings")
    ])
    
    await callback.message.edit_text("**–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**", reply_markup=kb, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(Command("find_user"))
async def find_user_by_id(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        user_id = int(message.text.split()[1])
        target_user = await User.filter(tg_id=user_id).first()
        
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        profile = await Profile.filter(user=target_user).first()
        name = profile.first_name if profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text = f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}**\n\n"
        text += f"ID: `{target_user.tg_id}`\n"
        text += f"–†–µ–π—Ç–∏–Ω–≥: `{target_user.raiting}`\n"
        text += f"–°—Ç–∞—Ç—É—Å: {'Premium' if target_user.is_premium else '–û–±—ã—á–Ω—ã–π'}\n"
        text += f"–ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if target_user.is_active else '‚ùå'}\n"
        
        if profile:
            text += f"–í–æ–∑—Ä–∞—Å—Ç: `{profile.age}`\n"
            text += f"–ì–æ—Ä–æ–¥: `{profile.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
        
        await message.answer(text, parse_mode="Markdown")
        
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/find_user <ID>`", parse_mode="Markdown")

@router.message(Command("ban_user"))
async def ban_user_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        duration = parts[2] if len(parts) > 2 else "1d"
        
        target_user = await User.filter(tg_id=user_id).first()
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        from datetime import datetime, timedelta
        from middlewares.notifications import notification_service
        
        if duration == "perm":
            expires_at = None
            ban_type = "permanent"
            hours = None
        else:
            hours = int(duration.replace("h", "").replace("d", "")) * (24 if "d" in duration else 1)
            expires_at = datetime.now() + timedelta(hours=hours)
            ban_type = "temp"
        
        await Ban.create(
            user=target_user,
            banned_by=user,
            ban_type=ban_type,
            duration_hours=hours,
            reason=f"–†—É—á–Ω–æ–π –±–∞–Ω –æ—Ç –∞–¥–º–∏–Ω–∞",
            expires_at=expires_at
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
        await notification_service.notify_ban(user_id, ban_type, "–†—É—á–Ω–æ–π –±–∞–Ω –æ—Ç –∞–¥–º–∏–Ω–∞", expires_at)
        
        await message.answer(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**", parse_mode="Markdown")
        
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/ban_user <ID> [1h|1d|perm]`", parse_mode="Markdown")

@router.message(Command("set_rating"))
async def set_rating_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        new_rating = int(parts[2])
        
        target_user = await User.filter(tg_id=user_id).first()
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        old_rating = target_user.raiting
        await User.filter(id=target_user.id).update(raiting=max(0, min(1000, new_rating)))
        
        from services.cache import profile_cache
        from middlewares.notifications import notification_service
        
        profile_cache.invalidate(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        await notification_service.notify_rating_change(user_id, old_rating, new_rating, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        await message.answer(
            f"**–†–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
            f"–ë—ã–ª–æ: `{old_rating}`\n"
            f"–°—Ç–∞–ª–æ: `{new_rating}`",
            parse_mode="Markdown"
        )
        
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/set_rating <ID> <—Ä–µ–π—Ç–∏–Ω–≥>`", parse_mode="Markdown")

@router.message(Command("make_premium"))
async def make_premium_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        user_id = int(message.text.split()[1])
        target_user = await User.filter(tg_id=user_id).first()
        
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        await User.filter(id=target_user.id).update(is_premium=True)
        
        from services.cache import profile_cache
        from middlewares.notifications import notification_service
        
        profile_cache.invalidate(user_id)
        
        await message.answer(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª Premium**", parse_mode="Markdown")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ Premium
        await notification_service.notify_premium_granted(user_id)
            
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/make_premium <ID>`", parse_mode="Markdown")



@router.message(Command("make_admin"))
async def make_admin_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        user_id = int(message.text.split()[1])
        target_user = await User.filter(tg_id=user_id).first()
        
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        if target_user.is_admin:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω**", parse_mode="Markdown")
            return
        
        await User.filter(id=target_user.id).update(is_admin=True)
        
        await message.answer(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞**", parse_mode="Markdown")
        
        from middlewares.notifications import notification_service
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
        await notification_service.notify_admin_granted(user_id)
            
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/make_admin <ID>`", parse_mode="Markdown")

@router.message(Command("remove_admin"))
async def remove_admin_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        user_id = int(message.text.split()[1])
        target_user = await User.filter(tg_id=user_id).first()
        
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        if user_id == message.from_user.id:
            await message.answer("**–ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —É —Å–∞–º–æ–≥–æ —Å–µ–±—è**", parse_mode="Markdown")
            return
        
        await User.filter(id=target_user.id).update(is_admin=False)
        
        from middlewares.notifications import notification_service
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
        await notification_service.notify_admin_removed(user_id)
        
        await message.answer(f"**–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É–±—Ä–∞–Ω—ã —É {user_id}**", parse_mode="Markdown")
        
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/remove_admin <ID>`", parse_mode="Markdown")

@router.message(Command("remove_premium"))
async def remove_premium_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        user_id = int(message.text.split()[1])
        target_user = await User.filter(tg_id=user_id).first()
        
        if not target_user:
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**", parse_mode="Markdown")
            return
        
        await User.filter(id=target_user.id).update(is_premium=False)
        
        from services.cache import profile_cache
        from middlewares.notifications import notification_service
        
        profile_cache.invalidate(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ Premium
        await notification_service.notify_premium_removed(user_id)
        
        await message.answer(f"**Premium —Å—Ç–∞—Ç—É—Å —É–±—Ä–∞–Ω —É {user_id}**", parse_mode="Markdown")
        
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/remove_premium <ID>`", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data == "admin_top_rating")
async def admin_top_rating(callback: types.CallbackQuery):
    top_users = await User.all().order_by('-raiting').limit(15)
    
    text = "**üìã –¢–æ–ø-15 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:**\n\n"
    for i, user in enumerate(top_users, 1):
        profile = await Profile.filter(user=user).first()
        name = profile.first_name if profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        status = "‚≠ê" if user.is_premium else ""
        text += f"`{i}.` {name} {status} - `{user.raiting}` –±–∞–ª–ª–æ–≤\n"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_users")])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "broadcast_all")
async def broadcast_all(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "**–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º**\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "`/send_all <—Ç–µ–∫—Å—Ç>` - –≤—Å–µ–º\n"
        "`/send_premium <—Ç–µ–∫—Å—Ç>` - —Ç–æ–ª—å–∫–æ Premium",
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "broadcast_premium")
async def broadcast_premium(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "**–†–∞—Å—Å—ã–ª–∫–∞ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/send_premium <—Ç–µ–∫—Å—Ç>`",
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "broadcast_cities")
async def broadcast_cities(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "**–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/send_city <–≥–æ—Ä–æ–¥> <—Ç–µ–∫—Å—Ç>`",
        parse_mode="Markdown"
    )

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–ª–∞–º—ã
# broadcast_ads —Ç–µ–ø–µ—Ä—å –≤ ad_manager.py

@router.callback_query(F.data == "create_ad")
async def create_ad(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç\n"
        "‚Ä¢ –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç",
        parse_mode="Markdown"
    )
    
    from states.ad_broadcast import AdStates
    await state.set_state(AdStates.waiting_content)

@router.callback_query(F.data == "ad_stats")
async def ad_stats(callback: types.CallbackQuery):
    total_users = await User.filter(is_active=True).count()
    premium_users = await User.filter(is_active=True, is_premium=True).count()
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã**\n\n"
    stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
    stats_text += f"‚≠ê Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{premium_users}`\n"
    stats_text += f"üë§ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users - premium_users}`\n\n"
    stats_text += f"üìà –û—Ö–≤–∞—Ç —Ä–µ–∫–ª–∞–º—ã: –¥–æ `{total_users}` —á–µ–ª–æ–≤–µ–∫"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", "broadcast_ads")])
    await callback.message.edit_text(stats_text, reply_markup=kb, parse_mode="Markdown")

@router.message(Command("send_all"))
async def send_broadcast_all(message: types.Message):
    from services.broadcast import broadcast_service
    
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    text = message.text.replace("/send_all", "").strip()
    if not text:
        await message.answer("**–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è**", parse_mode="Markdown")
        return
    
    status_msg = await message.answer("**–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...**", parse_mode="Markdown")
    
    result = await broadcast_service.send_to_all(message.bot, text, exclude_ids=[message.from_user.id])
    
    await status_msg.edit_text(
        f"**–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{result['sent']}`\n"
        f"–û—à–∏–±–æ–∫: `{result['failed']}`",
        parse_mode="Markdown"
    )

@router.message(Command("send_premium"))
async def send_broadcast_premium(message: types.Message):
    from services.broadcast import broadcast_service
    
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    text = message.text.replace("/send_premium", "").strip()
    if not text:
        await message.answer("**–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è**", parse_mode="Markdown")
        return
    
    status_msg = await message.answer("**–†–∞—Å—Å—ã–ª–∫–∞ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...**", parse_mode="Markdown")
    
    result = await broadcast_service.send_to_premium(message.bot, text)
    
    await status_msg.edit_text(
        f"**–†–∞—Å—Å—ã–ª–∫–∞ Premium –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{result['sent']}`\n"
        f"–û—à–∏–±–æ–∫: `{result['failed']}`",
        parse_mode="Markdown"
    )

@router.message(Command("send_city"))
async def send_broadcast_city(message: types.Message):
    from services.broadcast import broadcast_service
    
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    try:
        parts = message.text.split(maxsplit=2)
        city = parts[1]
        text = parts[2]
        
        status_msg = await message.answer(f"**–†–∞—Å—Å—ã–ª–∫–∞ –≤ {city}...**", parse_mode="Markdown")
        
        result = await broadcast_service.send_to_city(message.bot, city, text)
        
        await status_msg.edit_text(
            f"**–†–∞—Å—Å—ã–ª–∫–∞ –≤ {city} –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: `{result['sent']}`\n"
            f"–û—à–∏–±–æ–∫: `{result['failed']}`",
            parse_mode="Markdown"
        )
        
    except (IndexError, ValueError):
        await message.answer("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/send_city <–≥–æ—Ä–æ–¥> <—Ç–µ–∫—Å—Ç>`", parse_mode="Markdown")

@router.message(Command("system_stats"))
async def system_stats_command(message: types.Message):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user or not user.is_admin:
        return
    
    from handlers.chat import active_chats, search_queue
    from services.cache import profile_cache
    from services.ai_moderation import ai_moderator
    
    total_users = await User.all().count()
    active_users = await User.filter(is_active=True).count()
    premium_users = await User.filter(is_premium=True).count()
    banned_users = await Ban.filter(is_active=True).count()
    
    in_chat = len(active_chats) // 2
    in_queue = sum(len(queue) for queue in search_queue.values())
    
    text = f"**üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    text += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ: `{total_users}`\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active_users}`\n"
    text += f"‚Ä¢ Premium: `{premium_users}`\n"
    text += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: `{banned_users}`\n\n"
    
    text += f"üí¨ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
    text += f"‚Ä¢ –í —á–∞—Ç–µ: `{in_chat}`\n"
    text += f"‚Ä¢ –í –ø–æ–∏—Å–∫–µ: `{in_queue}`\n\n"
    
    text += f"‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**\n"
    text += f"‚Ä¢ –ö—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π: `{len(profile_cache.cache)}`\n"
    text += f"‚Ä¢ –ù–∞—Ä—É—à–∏—Ç–µ–ª–µ–π: `{len(ai_moderator.violation_history)}`"
    
    await message.answer(text, parse_mode="Markdown")

@router.callback_query(F.data.startswith("users_list_"))
async def users_list(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[2])
    per_page = 8
    offset = page * per_page
    
    users = await User.all().order_by('-raiting').offset(offset).limit(per_page)
    total_users = await User.all().count()
    total_pages = (total_users + per_page - 1) // per_page
    
    text = f"üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (—Å—Ç—Ä. {page + 1}/{total_pages})\n\n"
    
    buttons = []
    for user in users:
        profile = await Profile.filter(user=user).first()
        name = profile.first_name if profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        status = "‚≠ê" if user.is_premium else ""
        banned = "üö´" if await Ban.filter(user=user, is_active=True).exists() else ""
        
        text += f"`{user.tg_id}` {name} {status}{banned} - {user.raiting} –±.\n"
        buttons.append((f"{name[:12]}... ({user.raiting})", f"user_{user.tg_id}"))
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(("‚¨ÖÔ∏è", f"users_list_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(("‚û°Ô∏è", f"users_list_{page+1}"))
    
    all_buttons = buttons[:]
    if nav_buttons:
        all_buttons.extend(nav_buttons)
    all_buttons.append(("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_users"))
    
    kb = create_keyboard(all_buttons)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data.startswith("user_") & ~F.data.contains("_history_") & ~F.data.contains("_actions_"))
async def user_details(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    user = await User.filter(tg_id=user_id).first()
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    profile = await Profile.filter(user=user).first()
    name = profile.first_name if profile else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    text = f"üë§ **{name}** (ID: `{user.tg_id}`)\n\n"
    text += f"üìà –†–µ–π—Ç–∏–Ω–≥: `{user.raiting}`\n"
    text += f"‚≠ê –°—Ç–∞—Ç—É—Å: {'Premium' if user.is_premium else '–û–±—ã—á–Ω—ã–π'}\n"
    text += f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user.is_active else '–ù–µ—Ç'}\n"
    
    if profile:
        text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: `{profile.age or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
        text += f"üè† –ì–æ—Ä–æ–¥: `{profile.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
    
    active_ban = await Ban.filter(user=user, is_active=True).first()
    if active_ban:
        text += f"\nüö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n"
        text += f"‚Ä¢ –¢–∏–ø: {active_ban.ban_type}\n"
        if active_ban.expires_at:
            text += f"‚Ä¢ –î–æ: {active_ban.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    kb = create_keyboard([
        ("üìà –ò—Å—Ç–æ—Ä–∏—è", f"user_history_{user_id}"),
        ("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è", f"user_actions_{user_id}"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", "users_list_0")
    ])
    
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data.startswith("user_actions_"))
async def user_actions(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    user = await User.filter(tg_id=user_id).first()
    
    active_ban = await Ban.filter(user=user, is_active=True).first()
    
    buttons = []
    if active_ban:
        buttons.append(("‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", f"unban_{user_id}"))
    else:
        buttons.extend([
            ("üö´ –ë–∞–Ω 1—á", f"ban_{user_id}_1h"),
            ("üö´ –ë–∞–Ω 1–¥", f"ban_{user_id}_1d"),
            ("üö´ –ù–∞–≤—Å–µ–≥–¥–∞", f"ban_{user_id}_perm")
        ])
    
    buttons.extend([
        ("üìà +50", f"rating_{user_id}_+50"),
        ("üìâ -50", f"rating_{user_id}_-50"),
        ("‚≠ê Premium", f"premium_{user_id}") if not user.is_premium else ("‚ùå –£–±—Ä–∞—Ç—å Premium", f"unpremium_{user_id}"),
        ("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"user_{user_id}")
    ])
    
    kb = create_keyboard(buttons)
    await callback.message.edit_text(f"‚öôÔ∏è **–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º** `{user_id}`", reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data.startswith("user_history_"))
async def user_history(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    user = await User.filter(tg_id=user_id).first()
    
    text = f"üìà **–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** `{user_id}`\n\n"
    
    bans = await Ban.filter(user=user).order_by('-created_at').limit(5)
    if bans:
        text += "üö´ **–ë–∞–Ω—ã:**\n"
        for ban in bans:
            status = "‚úÖ" if ban.is_active else "‚ùå"
            text += f"{status} {ban.created_at.strftime('%d.%m %H:%M')} - {ban.ban_type}\n"
    
    from services.ai_moderation import ai_moderator
    violations = ai_moderator.violation_history.get(user_id, [])
    if violations:
        text += f"\n‚ö†Ô∏è **–ù–∞—Ä—É—à–µ–Ω–∏—è ({len(violations)}):**\n"
        for violation in violations[-3:]:
            import time
            vtime = time.strftime('%d.%m %H:%M', time.localtime(violation['timestamp']))
            text += f"‚Ä¢ {vtime} - {violation['type']}\n"
    
    if not bans and not violations:
        text += "‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    
    kb = create_keyboard([("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"user_{user_id}")])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data.startswith("ban_"))
async def ban_user_action(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[1])
    duration = parts[2]
    
    user = await User.filter(tg_id=user_id).first()
    admin = await User.filter(tg_id=callback.from_user.id).first()
    
    from datetime import datetime, timedelta
    from middlewares.notifications import notification_service
    
    if duration == "perm":
        expires_at = None
        ban_type = "permanent"
        hours = None
    else:
        hours = int(duration.replace("h", "").replace("d", "")) * (24 if "d" in duration else 1)
        expires_at = datetime.now() + timedelta(hours=hours)
        ban_type = "temp"
    
    await Ban.create(
        user=user,
        banned_by=admin,
        ban_type=ban_type,
        duration_hours=hours,
        reason="–ë–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É",
        expires_at=expires_at
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
    await notification_service.notify_ban(user_id, ban_type, "–ë–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É", expires_at)
    
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    await user_details(callback)

@router.callback_query(F.data.startswith("unban_"))
async def unban_user_action(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    user = await User.filter(tg_id=user_id).first()
    
    from middlewares.notifications import notification_service
    
    await Ban.filter(user=user, is_active=True).update(is_active=False)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–∞–Ω–µ
    await notification_service.notify_unban(user_id)
    
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    await user_details(callback)

@router.callback_query(F.data.startswith("rating_"))
async def rating_action(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[1])
    change = int(parts[2])
    
    user = await User.filter(tg_id=user_id).first()
    old_rating = user.raiting
    new_rating = max(0, min(1000, user.raiting + change))
    await User.filter(id=user.id).update(raiting=new_rating)
    
    from services.cache import profile_cache
    from middlewares.notifications import notification_service
    
    profile_cache.invalidate(user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    await notification_service.notify_rating_change(user_id, old_rating, new_rating, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    await callback.answer(f"–†–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {change:+d}")
    await user_details(callback)

@router.callback_query(F.data.startswith("premium_"))
async def premium_action(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await User.filter(tg_id=user_id).update(is_premium=True)
    
    from services.cache import profile_cache
    from middlewares.notifications import notification_service
    
    profile_cache.invalidate(user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ Premium
    await notification_service.notify_premium_granted(user_id)
    
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª Premium")
    await user_details(callback)

@router.callback_query(F.data.startswith("unpremium_"))
async def unpremium_action(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await User.filter(tg_id=user_id).update(is_premium=False)
    
    from services.cache import profile_cache
    from middlewares.notifications import notification_service
    
    profile_cache.invalidate(user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ Premium
    await notification_service.notify_premium_removed(user_id)
    
    await callback.answer(f"Premium —Å—Ç–∞—Ç—É—Å —É–±—Ä–∞–Ω —É {user_id}")
    await user_details(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –∂–∞–ª–æ–±–∞—Ö
@router.callback_query(F.data.startswith("admin_ban_"))
async def admin_ban_from_report(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    duration = parts[2]
    reported_id = int(parts[3])
    reporter_id = int(parts[4])
    
    from datetime import datetime, timedelta
    from middlewares.notifications import notification_service
    
    reported_user = await User.filter(tg_id=reported_id).first()
    admin = await User.filter(tg_id=callback.from_user.id).first()
    
    if duration == "perm":
        expires_at = None
        ban_type = "permanent"
        hours = None
    else:
        hours = int(duration.replace("h", "").replace("d", "")) * (24 if "d" in duration else 1)
        expires_at = datetime.now() + timedelta(hours=hours)
        ban_type = "temp"
    
    await Ban.create(
        user=reported_user,
        banned_by=admin,
        ban_type=ban_type,
        duration_hours=hours,
        reason="–ë–∞–Ω –ø–æ –∂–∞–ª–æ–±–µ",
        expires_at=expires_at
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
    await notification_service.notify_ban(reported_id, ban_type, "–ë–∞–Ω –ø–æ –∂–∞–ª–æ–±–µ", expires_at)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞
    await notification_service.notify_complaint_processed(
        reporter_id, f"–ñ–∞–ª–æ–±–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    )
    
    await callback.message.edit_text(
        callback.message.text + f"\n\n‚úÖ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** –ë–∞–Ω {duration}",
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("admin_rating_"))
async def admin_rating_from_report(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    reported_id = int(parts[2])
    change = int(parts[3])
    reporter_id = int(parts[4])
    
    from middlewares.notifications import notification_service
    
    reported_user = await User.filter(tg_id=reported_id).first()
    old_rating = reported_user.raiting
    new_rating = max(0, min(1000, reported_user.raiting + change))
    await User.filter(id=reported_user.id).update(raiting=new_rating)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await notification_service.notify_rating_change(
        reported_id, old_rating, new_rating, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ –∂–∞–ª–æ–±–µ"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞
    await notification_service.notify_complaint_processed(
        reporter_id, f"–ñ–∞–ª–æ–±–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞. –†–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {change:+d}."
    )
    
    await callback.message.edit_text(
        callback.message.text + f"\n\n‚úÖ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** –†–µ–π—Ç–∏–Ω–≥ {change:+d}",
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("admin_amnesty_"))
async def admin_amnesty_from_report(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    reported_id = int(parts[2])
    reporter_id = int(parts[3])
    
    from middlewares.notifications import notification_service
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞
    await notification_service.notify_complaint_processed(
        reporter_id, "–ñ–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–∏–ª–æ–≤–∞–Ω."
    )
    
    await callback.message.edit_text(
        callback.message.text + "\n\n‚úÖ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** –ê–º–Ω–∏—Å—Ç–∏—è",
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("admin_dismiss_"))
async def admin_dismiss_report(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    reporter_id = int(parts[2])
    reported_id = int(parts[3])
    
    from middlewares.notifications import notification_service
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞
    await notification_service.notify_complaint_processed(
        reporter_id, "–ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
    )
    
    await callback.message.edit_text(
        callback.message.text + "\n\n‚ùå **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        parse_mode="Markdown"
    )