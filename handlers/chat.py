from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import random
import time

from database.models import User, Profile
from services.smart_matching import smart_matcher
from keyboards.profile import create_keyboard

router = Router()

class ChatStates(StatesGroup):
    searching = State()
    chatting = State()

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {user_id: partner_id}
active_chats = {}
# –û—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞: {rating_tier: [user_ids]}
search_queue = {"high": [], "medium": [], "low": []}

async def background_partner_search(user_id: int, user_profile: dict, user_tier: str, bot):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã"""
    for i in range(200):  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        await asyncio.sleep(3)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–µ–ª –ª–∏ —É–∂–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        if user_id in active_chats:
            break
            
        user_in_queue = any(user_id in queue for queue in search_queue.values())
        if not user_in_queue:
            break
            
        # –ò—â–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª
        print(f"Background search for {user_id}, tier: {user_tier}, queue: {search_queue}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Å–ª–∞–±–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
        relaxed_level = min(i // 20, 4)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Å–ª–∞–±–ª–µ–Ω–∏—è (0-4)
        partner_id = await find_compatible_partner(user_id, user_profile, user_tier, relaxed_level)
        print(f"Found partner: {partner_id} (relaxed_level: {relaxed_level})")
        
        if partner_id:
            # –£–±–∏—Ä–∞–µ–º –æ–±–æ–∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            for tier_queue in search_queue.values():
                if user_id in tier_queue:
                    tier_queue.remove(user_id)
                if partner_id in tier_queue:
                    tier_queue.remove(partner_id)
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
            active_chats[user_id] = partner_id
            active_chats[partner_id] = user_id
            
            kb = create_keyboard([
                ("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_chat"),
                ("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "report_user")
            ])
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–±–æ—Ä–∞
                matches = await smart_matcher.find_best_matches(user_id, [partner_id], relaxed_level)
                match_info = ""
                if matches:
                    score, reasons = matches[0][1], matches[0][2]
                    if relaxed_level > 0:
                        match_info = f"\nüîÑ –ü–æ–¥–±–æ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏: {', '.join(reasons)}"
                    elif score > 0.6:
                        match_info = f"\n‚ú® –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–¥–±–æ—Ä: {', '.join(reasons)}"
                    elif reasons:
                        match_info = f"\nüîç –ü–æ–¥–±–æ—Ä –ø–æ: {', '.join(reasons)}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                await bot.send_message(user_id, f"**–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω**{match_info}\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=kb, parse_mode="Markdown")
                await bot.send_message(partner_id, f"**–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω**{match_info}\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=kb, parse_mode="Markdown")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –æ–±–æ–∏—Ö (–Ω—É–∂–Ω–æ –¥–ª—è FSM)
                from aiogram.fsm.storage.memory import MemoryStorage
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –≤ –ª–æ–≥–∞—Ö
                print(f"Chat created: {user_id} <-> {partner_id}")
            except Exception as e:
                print(f"Error sending messages: {e}")
            break

async def update_search_progress_simple(user_id: int, message, user_tier: str):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –±–µ–∑ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    for i in range(120):  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        if user_id in active_chats:
            break
            
        user_in_queue = any(user_id in queue for queue in search_queue.values())
        if not user_in_queue:
            break
            
        total_in_queue = sum(len(queue) for queue in search_queue.values())
        tier_count = len(search_queue[user_tier])
        progress_text = f"–í –æ—á–µ—Ä–µ–¥–∏: {total_in_queue} | –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {tier_count} —á–µ–ª."
        
        # –°–æ–≤–µ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–π –ò–ò-—Å–∏—Å—Ç–µ–º–µ
        tips = [
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞",
            "üéØ –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ª–∏—á–Ω–æ—Å—Ç–µ–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º",
            "‚ú® –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–±–æ—Ä–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –≤–∞—à–∏–º —á–∞—Ç–æ–º",
            "üîç –ü–æ–¥—Ä–æ–±–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ò–ò –Ω–∞–π—Ç–∏ –≤–∞–º –ª—É—á—à–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤",
            "üí¨ –û–±—â–∞–π—Ç–µ—Å—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –º–∞—Ç—á–∏",
            "üîÑ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π",
            "‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ - 10 –º–∏–Ω—É—Ç, –ò–ò –Ω–∞–π–¥–µ—Ç –∫–æ–≥–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ!"
        ]
        
        kb = create_keyboard([("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "cancel_search")])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤–µ—Ç –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–ª–∞–±–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª
        relaxed_level = min(i // 12, 4)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        relaxed_info = ""
        if relaxed_level == 1:
            relaxed_info = "\nüîÑ –†–∞—Å—à–∏—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —Ä–∞–º–∫–∏ (–¥–æ 15 –ª–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã)"
        elif relaxed_level == 2:
            relaxed_info = "\nüîÑ –†–∞—Å—à–∏—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç + —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"
        elif relaxed_level == 3:
            relaxed_info = "\nüîÑ –†–∞—Å—à–∏—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç + –≥–æ—Ä–æ–¥ + —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"
        elif relaxed_level >= 4:
            relaxed_info = "\nüîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (–∫—Ä–æ–º–µ –ø–æ–ª–∞/–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏)"
        
        if i % 3 == 0 and i > 0:
            tip = tips[(i // 3 - 1) % len(tips)]
            try:
                await message.edit_text(f"**–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω** `({i*5+5}—Å)`\n\n{progress_text}{relaxed_info}\n\n{tip}", reply_markup=kb, parse_mode="Markdown")
            except:
                pass
        else:
            try:
                await message.edit_text(f"**–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω** `({i*5+5}—Å)`\n\n{progress_text}{relaxed_info}", reply_markup=kb, parse_mode="Markdown")
            except:
                break

def get_rating_tier(rating: int) -> str:
    if rating >= 700:
        return "high"
    elif rating >= 300:
        return "medium"
    else:
        return "low"

def get_search_tiers(user_tier: str) -> list:
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞
    return ["high", "medium", "low"]

async def find_compatible_partner(user_id: int, user_profile: dict, user_tier: str, relaxed_level: int = 0):
    search_tiers = get_search_tiers(user_tier)
    candidates = []
    
    for tier in search_tiers:
        if tier in search_queue:
            candidates.extend(search_queue[tier])
    
    if not candidates:
        return None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–±–æ—Ä–∞
    matches = await smart_matcher.find_best_matches(user_id, candidates, relaxed_level)
    
    if not matches:
        print(f"No AI matches found for {user_profile['first_name']} (relaxed_level: {relaxed_level})")
        return None
    
    best_match = matches[0]
    best_match_id, score, reasons = best_match
    
    print(f"AI match for {user_profile['first_name']}: score {score:.2f}, reasons: {', '.join(reasons)}")
    return best_match_id

@router.message(F.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def start_search(message: types.Message, state: FSMContext):
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    profile = await Profile.filter(user=user).first()
    if not profile or not profile.profile_completed:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —á–∞—Ç–µ –ª–∏ —É–∂–µ
    if message.from_user.id in active_chats:
        await message.answer("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä.")
        return
    
    user_tier = get_rating_tier(user.raiting)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    from services.cache import profile_cache
    user_profile = await profile_cache.get_profile(message.from_user.id)
    if not user_profile or not user_profile['profile_completed']:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞
    total_in_queue = sum(len(queue) for queue in search_queue.values())
    tier_count = len(search_queue[user_tier])
    
    # –ò—â–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    print(f"Initial search for {message.from_user.id}, tier: {user_tier}, queue: {search_queue}")
    partner_id = await find_compatible_partner(message.from_user.id, user_profile, user_tier, 0)
    print(f"Initial found partner: {partner_id}")
    
    if partner_id:
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å–Ω–∞—á–∞–ª–∞
        active_chats[message.from_user.id] = partner_id
        active_chats[partner_id] = message.from_user.id
        print(f"Chat created between {message.from_user.id} and {partner_id}")
        
        # –¢–µ–ø–µ—Ä—å —É–±–∏—Ä–∞–µ–º –æ–±–æ–∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        for tier_queue in search_queue.values():
            if message.from_user.id in tier_queue:
                tier_queue.remove(message.from_user.id)
            if partner_id in tier_queue:
                tier_queue.remove(partner_id)
        
        kb = create_keyboard([
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_chat"),
            ("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "report_user")
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–±–æ—Ä–∞
        matches = await smart_matcher.find_best_matches(message.from_user.id, [partner_id], 0)
        match_info = ""
        if matches:
            score, reasons = matches[0][1], matches[0][2]
            if score > 0.7:
                match_info = f"\nüéÜ –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {', '.join(reasons)}"
            elif score > 0.5:
                match_info = f"\n‚ú® –•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {', '.join(reasons)}"
            elif reasons:
                match_info = f"\nüîç –ü–æ–¥–±–æ—Ä –ø–æ: {', '.join(reasons)}"
        
        await message.answer(f"**–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω**{match_info}\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=kb, parse_mode="Markdown")
        await message.bot.send_message(partner_id, f"**–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω**{match_info}\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=kb, parse_mode="Markdown")
        
        await state.set_state(ChatStates.chatting)
        print(f"Set chatting state for {message.from_user.id}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞
        if message.from_user.id not in search_queue[user_tier]:
            search_queue[user_tier].append(message.from_user.id)
            print(f"Added {message.from_user.id} to queue {user_tier}. Queue now: {search_queue}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
        asyncio.create_task(background_partner_search(message.from_user.id, user_profile, user_tier, message.bot))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–±–æ—Ä–∞
        search_criteria = f"üéØ **–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–±–æ—Ä–∞:**\n"
        search_criteria += f"‚Ä¢ –ì–æ—Ä–æ–¥: {user_profile.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        search_criteria += f"‚Ä¢ –¶–µ–ª—å: {user_profile.get('dating_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        search_criteria += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
        search_criteria += f"‚Ä¢ –ü–æ–ª/–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {user_profile.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}/{user_profile.get('orientation', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        
        kb = create_keyboard([("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "cancel_search")])
        search_msg = await message.answer(f"**–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞**\n\n{search_criteria}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...", reply_markup=kb, parse_mode="Markdown")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ callback
        progress_text = f"–í –æ—á–µ—Ä–µ–¥–∏: {total_in_queue + 1} | –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {tier_count + 1} —á–µ–ª.\n–û–∂–∏–¥–∞–Ω–∏–µ: –¥–æ 10 –º–∏–Ω—É—Ç"
        try:
            await search_msg.edit_text(f"**–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω**\n\n{search_criteria}{progress_text}", reply_markup=kb, parse_mode="Markdown")
        except:
            pass
        
        await state.set_state(ChatStates.searching)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±–µ–∑ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
        asyncio.create_task(update_search_progress_simple(message.from_user.id, search_msg, user_tier))

@router.callback_query(F.data == "cancel_search")
async def cancel_search(callback: types.CallbackQuery, state: FSMContext):
    for tier_queue in search_queue.values():
        if callback.from_user.id in tier_queue:
            tier_queue.remove(callback.from_user.id)
    
    await callback.message.edit_text("**–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω**", parse_mode="Markdown")
    await state.clear()

@router.callback_query(F.data.startswith("relaxed_search_"))
async def relaxed_search(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    
    if user_id != callback.from_user.id:
        await callback.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    from services.cache import profile_cache
    user_profile = await profile_cache.get_profile(user_id)
    user_tier = get_rating_tier((await User.filter(tg_id=user_id).first()).raiting)
    
    # –ü–æ–∏—Å–∫ –≤ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ)
    partner_id = await find_compatible_partner(user_id, user_profile, user_tier, 4)
    
    if partner_id:
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
        active_chats[user_id] = partner_id
        active_chats[partner_id] = user_id
        
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        for tier_queue in search_queue.values():
            if user_id in tier_queue:
                tier_queue.remove(user_id)
            if partner_id in tier_queue:
                tier_queue.remove(partner_id)
        
        kb = create_keyboard([
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_chat"),
            ("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", "report_user")
        ])
        
        await callback.message.edit_text(
            "**üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!**\n\n"
            "üí° –ü–æ–¥–±–æ—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!",
            reply_markup=kb,
            parse_mode="Markdown"
        )
        
        await callback.bot.send_message(
            partner_id,
            "**üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!**\n\n"
            "üí° –ü–æ–¥–±–æ—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!",
            reply_markup=kb,
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "**üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data == "end_chat")
async def end_chat(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö
        del active_chats[user_id]
        del active_chats[partner_id]
        
        await callback.message.edit_text("**–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ.", parse_mode="Markdown")
        await callback.bot.send_message(partner_id, "**–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ.", parse_mode="Markdown")
    
    await state.clear()

@router.callback_query(F.data == "report_user")
async def report_user(callback: types.CallbackQuery):
    try:
        print(f"Report button clicked by {callback.from_user.id}")
        user_id = callback.from_user.id
        partner_id = active_chats.get(user_id)
        
        print(f"Reporter: {user_id}, Reported: {partner_id}")
        
        if not partner_id:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
            return
        
        if partner_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            reporter_user = await User.filter(tg_id=user_id).first()
            reported_user = await User.filter(tg_id=partner_id).first()
            
            reporter_profile = await Profile.filter(user=reporter_user).first()
            reported_profile = await Profile.filter(user=reported_user).first()
        
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            from bot import chat_logger
            chat_log = chat_logger.get_chat_log(user_id, partner_id)
            print(f"Chat log for report: {len(chat_log)} messages")
        
            # AI-–∞–Ω–∞–ª–∏–∑ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∂–∞–ª–æ–±—ã
            try:
                from services.ai_filters import analyze_report_validity
                
                reporter_data = {
                    'user_id': user_id,
                    'first_name': reporter_profile.first_name
                }
                reported_data = {
                    'user_id': partner_id,
                    'first_name': reported_profile.first_name
                }
                
                validity = await analyze_report_validity(chat_log, reporter_data, reported_data)
                print(f"AI analysis result: {validity}")
            except Exception as e:
                print(f"AI analysis failed: {e}")
                # Fallback - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
                validity = {
                    'is_valid': True,
                    'confidence': 0.5,
                    'reason': '–û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ',
                    'action': 'warning'
                }
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
        status_emoji = "‚úÖ" if validity['is_valid'] else "‚ùå"
        report_text = f"{status_emoji} –ñ–ê–õ–û–ë–ê ({validity['action'].upper()})\n\n"
        report_text += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {reporter_profile.first_name} (ID: {user_id})\n"
        report_text += f"üéØ –ù–∞ –∫–æ–≥–æ: {reported_profile.first_name} (ID: {partner_id})\n"
        report_text += f"üìÖ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        report_text += f"ü§ñ AI-–∞–Ω–∞–ª–∏–∑:\n"
        report_text += f"‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {validity['confidence']:.0%}\n"
        report_text += f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {validity['reason']}\n"
        report_text += f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {validity['action']}\n\n"
        report_text += f"üìä –†–µ–π—Ç–∏–Ω–≥ –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ: {reported_user.raiting}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_kb = create_keyboard([
            ("–ë–∞–Ω 1—á", f"admin_ban_1h_{partner_id}_{user_id}"), ("–ë–∞–Ω 1–¥", f"admin_ban_1d_{partner_id}_{user_id}"),
            ("–ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞", f"admin_ban_perm_{partner_id}_{user_id}"),
            ("-50 —Ä–µ–π—Ç–∏–Ω–≥", f"admin_rating_{partner_id}_-50_{user_id}"), ("+20 —Ä–µ–π—Ç–∏–Ω–≥", f"admin_rating_{partner_id}_20_{user_id}"),
            ("–ê–º–Ω–∏—Å—Ç–∏—è", f"admin_amnesty_{partner_id}_{user_id}"), ("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"admin_dismiss_{user_id}_{partner_id}")
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admins = await User.filter(is_admin=True).all()
        print(f"Found {len(admins)} admins")
        
        for admin in admins:
            try:
                print(f"Sending report to admin {admin.tg_id}")
                await callback.bot.send_message(admin.tg_id, report_text, reply_markup=admin_kb)
                print(f"Report sent to admin {admin.tg_id}")
            except Exception as e:
                print(f"Failed to send to admin {admin.tg_id}: {e}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI-–∞–Ω–∞–ª–∏–∑–∞
        from middlewares.notifications import notification_service
        
        response_text = "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º."
        
        if validity['action'] == 'penalize':
            # –°–∏–ª—å–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            penalty = int(20 * validity['confidence'])
            old_rating = reported_user.raiting
            new_rating = max(0, reported_user.raiting - penalty)
            await User.filter(id=reported_user.id).update(raiting=new_rating)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏
            await notification_service.notify_rating_change(
                partner_id, old_rating, new_rating, 
                f"–ù–∞—Ä—É—à–µ–Ω–∏–µ: {validity['reason']}"
            )
            response_text += f" –†–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ {penalty}."
            
        elif validity['action'] == 'warning':
            # –õ–µ–≥–∫–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            penalty = 5
            old_rating = reported_user.raiting
            new_rating = max(0, reported_user.raiting - penalty)
            await User.filter(id=reported_user.id).update(raiting=new_rating)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
            await notification_service.notify_violation_warning(
                partner_id, "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª", validity['reason']
            )
            await notification_service.notify_rating_change(
                partner_id, old_rating, new_rating, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
            )
            response_text += f" –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (-{penalty} —Ä–µ–π—Ç–∏–Ω–≥–∞)."
            
        elif validity['action'] == 'penalize_reporter':
            # –ù–∞–∫–∞–∑—ã–≤–∞–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞ –∑–∞ –ª–æ–∂–Ω—É—é –∂–∞–ª–æ–±—É
            penalty = 15
            old_rating = reporter_user.raiting
            new_rating = max(0, reporter_user.raiting - penalty)
            await User.filter(id=reporter_user.id).update(raiting=new_rating)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞
            await notification_service.notify_rating_change(
                user_id, old_rating, new_rating, "–õ–æ–∂–Ω–∞—è –∂–∞–ª–æ–±–∞"
            )
            response_text = f"–õ–æ–∂–Ω–∞—è –∂–∞–ª–æ–±–∞! –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å–Ω–∏–∂–µ–Ω –Ω–∞ {penalty}."
            
        else:  # ignore
            response_text += " –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            await notification_service.notify_complaint_processed(
                user_id, "–ñ–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
            )
        
        await callback.answer(response_text)
        
    except Exception as e:
        print(f"Error in report_user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã")   
    except Exception as e:
        print(f"Error in report_user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ - –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ AI
@router.message(ChatStates.searching)
async def handle_search_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ - –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Ç–Ω–µ—Ä
    if message.from_user.id in active_chats:
        await state.set_state(ChatStates.chatting)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
    user_in_queue = any(message.from_user.id in queue for queue in search_queue.values())
    if not user_in_queue:
        await state.clear()
        return
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    text_lower = message.text.lower() if message.text else ""
    
    if any(word in text_lower for word in ['—Å–∫–æ–ª—å–∫–æ', '–¥–æ–ª–≥–æ', '–≤—Ä–µ–º—è']):
        response = "‚è±Ô∏è –ü–æ–∏—Å–∫ –¥–æ 10 –º–∏–Ω—É—Ç. –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –º–Ω–æ–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞!"
    elif any(word in text_lower for word in ['–∫–∞–∫', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–∏–∏']):
        response = "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥, —Ü–µ–ª–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö —á–∞—Ç–∞—Ö!"
    elif any(word in text_lower for word in ['–æ—Ç–º–µ–Ω–∏—Ç—å', '—Å—Ç–æ–ø', '—Ö–≤–∞—Ç–∏—Ç']):
        response = "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫' –Ω–∏–∂–µ."
    elif any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ']):
        response = "üëã –ü—Ä–∏–≤–µ—Ç! –ò—â–µ–º –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
    else:
        responses = [
            "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...",
            "‚ú® –ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å...",
            "üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...",
            "üí´ –ò–ò –Ω–∞–π–¥–µ—Ç –≤–∞–º –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!"
        ]
        import random
        response = random.choice(responses)
    
    kb = create_keyboard([("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "cancel_search")])
    await message.answer(response, reply_markup=kb)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö
@router.message(lambda message: message.from_user.id in active_chats)
async def handle_chat_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    partner_id = active_chats.get(user_id)
    
    print(f"Chat message from {user_id}, partner: {partner_id}, active_chats: {active_chats}")
    
    if not partner_id:
        await message.answer("–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        await state.clear()
        return
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    from bot import chat_logger
    if message.text:
        chat_logger.chat_logs.setdefault(chat_logger._get_chat_key(user_id, partner_id), []).append({
            'user_id': user_id,
            'message': message.text,
            'timestamp': time.time(),
            'type': 'text'
        })
        print(f"Force logged message from {user_id}: {message.text[:30]}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è middleware —á–µ—Ä–µ–∑ data
    # –ù–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Message - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–∞–Ω–æ–Ω–∞ –∏ 18+ —á–∞—Ç–∞ (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    # conversation_stats = data.get('conversation_stats', {})
    conversation_stats = {}
    
    if conversation_stats.get('can_deanon'):
        kb = create_keyboard([
            ("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–∞–Ω–æ–Ω", "offer_deanon"),
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_chat")
        ])
        await message.bot.send_message(user_id, "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∑–∞–∏–º–Ω—ã–π –¥–µ–∞–Ω–æ–Ω!", reply_markup=kb)
    
    if conversation_stats.get('can_adult_chat'):
        kb = create_keyboard([
            ("–ü–µ—Ä–µ–π—Ç–∏ –≤ 18+ —Ä–µ–∂–∏–º", "adult_mode"),
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_chat")
        ])
        await message.bot.send_message(user_id, "üîû –î–æ—Å—Ç—É–ø–µ–Ω 18+ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è!", reply_markup=kb)
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    try:
        if message.text:
            await message.bot.send_message(partner_id, message.text)
        elif message.photo:
            await message.bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption or "üì∑ –§–æ—Ç–æ")
        elif message.video:
            await message.bot.send_video(partner_id, message.video.file_id, caption=message.caption or "üé• –í–∏–¥–µ–æ")
        elif message.voice:
            await message.bot.send_voice(partner_id, message.voice.file_id)
        elif message.video_note:
            await message.bot.send_video_note(partner_id, message.video_note.file_id)
        elif message.audio:
            await message.bot.send_audio(partner_id, message.audio.file_id, caption=message.caption or "üéµ –ê—É–¥–∏–æ")
        elif message.document:
            await message.bot.send_document(partner_id, message.document.file_id, caption=message.caption or "üìÑ –î–æ–∫—É–º–µ–Ω—Ç")
        elif message.sticker:
            await message.bot.send_sticker(partner_id, message.sticker.file_id)
        elif message.animation:
            await message.bot.send_animation(partner_id, message.animation.file_id, caption=message.caption or "üé¨ GIF")
        elif message.location:
            await message.bot.send_location(partner_id, message.location.latitude, message.location.longitude)
        elif message.contact:
            await message.bot.send_contact(partner_id, message.contact.phone_number, message.contact.first_name, message.contact.last_name)
        else:
            await message.answer("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    except Exception as e:
        print(f"Error sending message: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@router.callback_query(F.data == "offer_deanon")
async def offer_deanon(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        kb = create_keyboard([
            ("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", f"accept_deanon_{user_id}"),
            ("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", "decline_deanon")
        ])
        
        await callback.bot.send_message(
            partner_id, 
            "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∑–∞–∏–º–Ω–æ–≥–æ –¥–µ–∞–Ω–æ–Ω–∞. –í—ã —É–∑–Ω–∞–µ—Ç–µ –∏–º–µ–Ω–∞ –∏ —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.",
            reply_markup=kb
        )
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

@router.callback_query(F.data.startswith("accept_deanon_"))
async def accept_deanon(callback: types.CallbackQuery):
    requester_id = int(callback.data.split("_")[2])
    accepter_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    requester = await User.filter(tg_id=requester_id).first()
    accepter = await User.filter(tg_id=accepter_id).first()
    
    if requester and accepter:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥—Ä—É–≥ –¥—Ä—É–≥—É
        await callback.bot.send_message(
            requester_id,
            f"üéâ –î–µ–∞–Ω–æ–Ω –ø—Ä–∏–Ω—è—Ç!\nüë§ –ò–º—è: {accepter.first_name}\nüÜî ID: @{accepter.username or '—Å–∫—Ä—ã—Ç'}"
        )
        await callback.bot.send_message(
            accepter_id,
            f"üéâ –î–µ–∞–Ω–æ–Ω —Å–æ—Å—Ç–æ—è–ª—Å—è!\nüë§ –ò–º—è: {requester.first_name}\nüÜî ID: @{requester.username or '—Å–∫—Ä—ã—Ç'}"
        )
        
    await callback.answer("–î–µ–∞–Ω–æ–Ω –ø—Ä–∏–Ω—è—Ç!")

@router.callback_query(F.data == "decline_deanon")
async def decline_deanon(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        await callback.bot.send_message(partner_id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–Ω–æ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "adult_mode")
async def adult_mode(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        kb = create_keyboard([
            ("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ 18+", f"accept_adult_{user_id}"),
            ("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", "decline_adult")
        ])
        
        await callback.bot.send_message(
            partner_id,
            "üîû –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º 18+ –æ–±—â–µ–Ω–∏—è",
            reply_markup=kb
        )
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

@router.callback_query(F.data.startswith("accept_adult_"))
async def accept_adult(callback: types.CallbackQuery):
    requester_id = int(callback.data.split("_")[2])
    accepter_id = callback.from_user.id
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await callback.bot.send_message(requester_id, "üîû –†–µ–∂–∏–º 18+ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    await callback.bot.send_message(accepter_id, "üîû –†–µ–∂–∏–º 18+ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    await callback.answer("–†–µ–∂–∏–º 18+ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

@router.callback_query(F.data == "decline_adult")
async def decline_adult(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    partner_id = active_chats.get(user_id)
    
    if partner_id:
        await callback.bot.send_message(partner_id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 18+ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

