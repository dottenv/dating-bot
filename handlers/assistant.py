from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import User, Profile
from keyboards.profile import create_keyboard
from services.ai_assistant import assistant
from utils.debug import dbg

class AssistantStates(StatesGroup):
    chatting = State()

router = Router()

@router.message(Command("assistant", "help_ai", "ai"))
async def cmd_assistant(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    kb = create_keyboard([
        ("üìä –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥?", "ask_rating"),
        ("üîç –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫?", "ask_search"),
        ("üö® –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±", "ask_reports"),
        ("üé≠ –ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∞–Ω–æ–Ω?", "ask_deanon"),
        ("üí¨ –ü—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å", "ask_chat"),
        ("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close_assistant")
    ])
    
    welcome_text = """
ü§ñ **AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–æ—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤**

–ü—Ä–∏–≤–µ—Ç! –Ø –∑–Ω–∞—é –≤—Å–µ –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç. –ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å:

‚Ä¢ –°–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –±–∞–ª–ª–æ–≤
‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
‚Ä¢ –†–∞–±–æ—Ç—É –∂–∞–ª–æ–± –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏  
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–∞–Ω–æ–Ω–∞
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å! üòä
"""
    
    await message.answer(welcome_text, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data.startswith("ask_"))
async def handle_quick_questions(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    question_type = callback.data.split("_")[1]
    
    user = await User.filter(tg_id=callback.from_user.id).first()
    user_data = {
        'rating': user.raiting,
        'is_premium': user.is_premium,
        'in_chat': False,  # –ë—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        'in_search': False  # –ë—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from handlers.chat import active_chats, search_queue
    user_data['in_chat'] = callback.from_user.id in active_chats
    user_data['in_search'] = any(callback.from_user.id in queue for queue in search_queue.values())
    
    questions = {
        'rating': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤?',
        'search': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤?', 
        'reports': '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –∂–∞–ª–æ–±',
        'deanon': '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∞–Ω–æ–Ω –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?',
        'chat': '–î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º!'
    }
    
    question = questions.get(question_type, '–†–∞—Å—Å–∫–∞–∂–∏ –æ –±–æ—Ç–µ')
    response = await assistant.get_response(question, user_data)
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ "–ø–æ–±–æ–ª—Ç–∞—Ç—å" –≤–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if question_type == 'chat':
        kb = create_keyboard([
            ("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É", "continue_chat"),
            ("‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "ask_another"),
            ("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close_assistant")
        ])
        await callback.message.edit_text(f"{response}\n\nüí¨ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!", reply_markup=kb, parse_mode="Markdown")
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        kb = create_keyboard([
            ("‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "ask_another"),
            ("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close_assistant")
        ])
        await callback.message.edit_text(response, reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "continue_chat")
async def continue_chat(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –±–µ—Å–µ–¥—ã"""
    await callback.message.edit_text(
        "üí¨ **–†–µ–∂–∏–º –±–µ—Å–µ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "üí° –ú–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å:\n"
        "‚Ä¢ –í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ\n"
        "‚Ä¢ –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º!\n\n"
        "üö´ –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: `/stop`",
        parse_mode="Markdown"
    )
    await state.set_state(AssistantStates.chatting)

@router.message(AssistantStates.chatting)
async def handle_chat_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–µ–¥—ã"""
    if message.text and message.text.lower() in ['/stop', '—Å—Ç–æ–ø', '–≤—ã—Ö–æ–¥', '–∑–∞–∫–æ–Ω—á–∏—Ç—å']:
        await message.answer("üëã –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ! üòä")
        await state.clear()
        return
    
    user = await User.filter(tg_id=message.from_user.id).first()
    user_data = {
        'rating': user.raiting,
        'is_premium': user.is_premium,
        'in_chat': False,
        'in_search': False,
        'chatting_with_ai': True
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    response = await assistant.get_response(message.text or "–ü—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º", user_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
    response += "\n\nüí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ `/stop` –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    
    await message.answer(f"ü§ñ {response}", parse_mode="Markdown")

@router.callback_query(F.data == "ask_another")
async def ask_another_question(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await state.clear()
    await cmd_assistant(callback.message)

@router.callback_query(F.data == "close_assistant")
async def close_assistant(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await state.clear()
    await callback.message.edit_text("ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ! üòä")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
@router.message(F.text.startswith(("AI", "–ò–ò", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ü–æ–º–æ—â–Ω–∏–∫", "?")))
async def handle_direct_question(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
    user = await User.filter(tg_id=message.from_user.id).first()
    if not user:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
    question = message.text
    for prefix in ["AI", "–ò–ò", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ü–æ–º–æ—â–Ω–∏–∫"]:
        if question.startswith(prefix):
            question = question[len(prefix):].strip(" ,:!?")
            break
    
    if not question:
        question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ –±–æ—Ç–µ"
    
    user_data = {
        'rating': user.raiting,
        'is_premium': user.is_premium,
        'in_chat': False,
        'in_search': False
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from handlers.chat import active_chats, search_queue
    user_data['in_chat'] = message.from_user.id in active_chats
    user_data['in_search'] = any(message.from_user.id in queue for queue in search_queue.values())
    
    dbg(f"–ü—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {question}", "AI_ASSISTANT")
    
    response = await assistant.get_response(question, user_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    kb = create_keyboard([
        ("ü§ñ –ú–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", "open_assistant_menu")
    ])
    
    await message.answer(f"ü§ñ **AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:**\n\n{response}", reply_markup=kb, parse_mode="Markdown")

@router.callback_query(F.data == "open_assistant_menu")
async def open_assistant_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await state.clear()
    await cmd_assistant(callback.message)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
async def get_search_entertainment(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–∏—Å–∫–µ"""
    user = await User.filter(tg_id=user_id).first()
    user_data = {
        'rating': user.raiting if user else 100,
        'is_premium': user.is_premium if user else False,
        'in_chat': False,
        'in_search': True
    }
    
    entertainment_questions = [
        "–†–∞–∑–≤–ª–µ–∫–∏ –º–µ–Ω—è –ø–æ–∫–∞ –∏–¥–µ—Ç –ø–æ–∏—Å–∫",
        "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
        "–ü–æ–±–æ–ª—Ç–∞–µ–º?",
        "–ö–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Å–æ–≤–µ—Ç?"
    ]
    
    import random
    question = random.choice(entertainment_questions)
    
    return await assistant.get_response(question, user_data)