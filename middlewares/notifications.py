from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from typing import Callable, Dict, Any, Awaitable
from database.models import User, Profile, Ban
import asyncio

class NotificationService:
    def __init__(self):
        self.bot = None
    
    def set_bot(self, bot):
        self.bot = bot
    
    async def send_notification(self, user_id: int, message: str, parse_mode: str = "Markdown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.bot:
            return
        try:
            await self.bot.send_message(user_id, message, parse_mode=parse_mode)
        except:
            pass
    
    async def notify_ban(self, user_id: int, ban_type: str, reason: str, expires_at=None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ"""
        if ban_type == "permanent":
            text = f"üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞**\n\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        else:
            expire_text = expires_at.strftime('%d.%m.%Y %H:%M') if expires_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text = f"üö´ **–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã**\n\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n‚è∞ –î–æ: {expire_text}"
        
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_unban(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ"""
        text = "‚úÖ **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞**\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_premium_granted(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ Premium"""
        text = ("üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ Premium —Å—Ç–∞—Ç—É—Å!\n\n"
                "**–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
                "‚Ä¢ –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_premium_removed(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ Premium"""
        text = "‚ùå **Premium —Å—Ç–∞—Ç—É—Å –æ—Ç–æ–∑–≤–∞–Ω**\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ–±—ã—á–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_admin_granted(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        text = "üëë **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏."
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_admin_removed(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        text = "‚ùå **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã**\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_rating_change(self, user_id: int, old_rating: int, new_rating: int, reason: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        change = new_rating - old_rating
        emoji = "üìà" if change > 0 else "üìâ"
        sign = "+" if change > 0 else ""
        
        text = f"{emoji} **–†–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
        text += f"–ë—ã–ª–æ: `{old_rating}`\n"
        text += f"–°—Ç–∞–ª–æ: `{new_rating}` ({sign}{change})\n"
        if reason:
            text += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_complaint_processed(self, user_id: int, result: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã"""
        text = f"üìã **–í–∞—à–∞ –∂–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞**\n\n{result}"
        await self.send_notification(user_id, text, "Markdown")
    
    async def notify_violation_warning(self, user_id: int, violation_type: str, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"""
        text = f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ**\n\n"
        text += f"–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è: {violation_type}\n"
        text += f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        text += "–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
        
        await self.send_notification(user_id, text, "Markdown")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()

class NotificationMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç –≤ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if 'bot' in data and not notification_service.bot:
            notification_service.set_bot(data['bot'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã–µ
        data['notification_service'] = notification_service
        
        return await handler(event, data)