import time
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message
from database.models import User

class SmartBanMiddleware(BaseMiddleware):
    def __init__(self):
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {'warnings': count, 'temp_ban_until': timestamp}}
        self.user_violations = {}
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, Message) and event.from_user:
            user_id = event.from_user.id
            user = data.get('user')
            
            if not user:
                return await handler(event, data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
            if user_id in self.user_violations:
                temp_ban_until = self.user_violations[user_id].get('temp_ban_until', 0)
                if temp_ban_until > time.time():
                    ban_hours = int((temp_ban_until - time.time()) / 3600)
                    await event.answer(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {ban_hours} —á–∞—Å–æ–≤ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
                    return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
            content_analysis = data.get('content_analysis', {})
            if content_analysis.get('is_toxic') or content_analysis.get('block_message'):
                if user_id not in self.user_violations:
                    self.user_violations[user_id] = {'warnings': 0, 'temp_ban_until': 0}
                
                violations = self.user_violations[user_id]
                violations['warnings'] += 1
                
                # –ì—Ä–∞–¥–∞—Ü–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π
                if violations['warnings'] == 1:
                    await event.answer("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è.")
                elif violations['warnings'] == 2:
                    await event.answer("‚ö†Ô∏è –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.")
                elif violations['warnings'] == 3:
                    # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ 1 —á–∞—Å
                    violations['temp_ban_until'] = time.time() + 3600
                    await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 1 —á–∞—Å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
                    return
                elif violations['warnings'] >= 5:
                    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω
                    await User.filter(id=user.id).update(is_banned=True)
                    await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
                    return
        
        return await handler(event, data)